<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Art.sy Engineering]]></title>
  <link href="http://artsy.github.com/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2012-05-22T10:27:01-04:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Art.sy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating Automatic Plain Text MIME Parts with Rails ActionMailer]]></title>
    <link href="http://artsy.github.com/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/"/>
    <updated>2012-05-16T20:52:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer</id>
    <content type="html"><![CDATA[<p>E-mail is one of the most important ways to engage your users. And every time you touch a user&#8217;s inbox, it reflects on your brand. But getting email right has become increasing difficult due to the complexities introduced by the thousands of web-based, desktop and mobile mail clients. Email formatting is like the &#8220;Hunger Games&#8221; where the major players include online services such as GMail, Yahoo, Hotmail or AOL, desktop clients such as Outlook and a myriad mobile devices ranging from iPhone and Android to Blackberry.</p>

<p>To deal with this landscape, the MIME standard allows systems to send e-mail with multiple parts: <code>plain/text</code> for business-efficient devices such as the Blackberry, and <code>text/html</code> for web-based e-mail readers, such as GMail. Furthermore, <code>ActionMailer</code> supports multiple template formats: create an <code>.html.haml</code> template along with a <code>.txt.haml</code> template to generate both. We also know that <code>text/plain</code> email helps deliverability, but we believe a disproportionately small amount of text e-mails are actually read - the vast majority of devices are capable of parsing some HTML.</p>

<p>Is it possible to avoid having to maintain two separate templates without sacrificing deliverability? How can we inject a <code>text/plain</code> part into HTML e-mail that is both useful and &#8220;free&#8221;?</p>

<!--more-->


<p><code>ActionMailer::Base</code> defines an internal method called <code>collect_responses_and_parts_order</code> (<a href="http://apidock.com/rails/ActionMailer/Base/collect_responses_and_parts_order">#ref</a>), which iterates over templates and renders them. Let&#8217;s override that method and examine the contents of the generated parts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">collect_responses_and_parts_order</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">responses</span><span class="p">,</span> <span class="n">parts_order</span> <span class="o">=</span> <span class="k">super</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">responses</span><span class="p">,</span> <span class="n">parts_order</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each <code>response</code> is a MIME part with its boundary and the <code>parts_order</code> is the order in which the parts appear in the final e-mail. The <a href="http://www.ietf.org/rfc/rfc1341.txt">MIME RFC 1341</a> says that the parts must be generated in the increasing order of preference, ie. <code>text/html</code> content-type part last, provided you want it to be the preferred format of your email.</p>

<p>We can find whether the generated e-mail contains a <code>plain/text</code> part and otherwise generate one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">html_part</span> <span class="o">=</span> <span class="n">responses</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span> <span class="n">response</span><span class="o">[</span><span class="ss">:content_type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">text_part</span> <span class="o">=</span> <span class="n">responses</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span> <span class="n">response</span><span class="o">[</span><span class="ss">:content_type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;text/plain&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">html_part</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="n">text_part</span>
</span><span class='line'>  <span class="c1"># generate a text/plain part</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generating the text part means stripping all HTML with links preserved. <a href="http://nokogiri.org/">Nokogiri</a> has a very convenient deep <code>traverse</code> iterator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">body_parts</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="n">html_part</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">traverse</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">text?</span> <span class="ow">and</span> <span class="o">!</span> <span class="p">(</span><span class="n">content</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">content</span> <span class="p">?</span> <span class="n">node</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">strip</span> <span class="p">:</span> <span class="kp">nil</span><span class="p">)</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">body_parts</span> <span class="o">&lt;&lt;</span> <span class="n">content</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">node</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">href</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">href</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^https?:/</span><span class="p">)</span>
</span><span class='line'>    <span class="n">body_parts</span> <span class="o">&lt;&lt;</span> <span class="n">href</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have all the parts, assemble them, get rid of duplicate text and links, and re-insert into the email as a <code>text/plain</code> multipart block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">responses</span><span class="o">.</span><span class="n">insert</span> <span class="mi">0</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">content_type</span><span class="p">:</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">body</span><span class="p">:</span> <span class="n">body_parts</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">parts_order</span><span class="o">.</span><span class="n">insert</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;text/plain&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code for <code>ActionMailerWithTextPart</code> is available in <a href="https://gist.github.com/2719486">this gist</a> under the MIT license. Inherit your mailers from this class to get automatic <code>plain/text</code> fallback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Organize Over 3000 RSpec Specs and Retry Test Failures]]></title>
    <link href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/"/>
    <updated>2012-05-15T12:00:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures</id>
    <content type="html"><![CDATA[<p>Having over three thousand RSpec tests in a single project has become difficult to manage. We chose to organize these into suites, somewhat mimicking our directory structure. And while we succeeded at making our Capybara integration tests more reliable (see <a href="http://artsy.github.com/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/">Reliably Testing Asynchronous UI with RSpec and Capybara</a>), they continue relying on finicky timeouts. To avoid too many false positives we&#8217;ve put together a system to retry failed tests. We know that a spec that fails twice in a row is definitely not a fluke!</p>

<p>Create a new Rake file in <code>lib/tasks/test_suites.rake</code> and declare an array of test suites.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">SPEC_SUITES</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="ss">:models</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="o">=&gt;</span> <span class="s2">&quot;spec/models/**/*_spec.rb&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="ss">:controllers</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="o">=&gt;</span> <span class="s2">&quot;spec/controllers/**/*_spec.rb&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="ss">:views</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="o">=&gt;</span> <span class="s2">&quot;spec/views/**/*_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p><code>RSpec::Core</code> contains a module called <code>RakeTask</code> that will programmatically create Rake tasks for you.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:test</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:suite</span>
</span><span class='line'>    <span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:run&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">suite</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">fail_on_error</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>rake -T</code> to ensure that the suites have been generated. To execute a suite, run <code>rake test:suite:models:run</code>. Having a test suite will help you separate spec failures and enables other organizations than by directory, potentially allowing you to tag tests across multiple suites.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake spec:suite:models:run
</span><span class='line'>rake spec:suite:controllers:run
</span><span class='line'>rake spec:suite:views:run
</span></code></pre></td></tr></table></div></figure>


<p>Retrying failed specs has been a long requested feature in RSpec (see <a href="https://github.com/rspec/rspec-core/issues/456">#456</a>). A viable approach has been finally implemented by <a href="https://github.com/antifun">Matt Mitchell</a> in <a href="https://github.com/rspec/rspec-core/pull/596">#596</a>. There&#8217;re a few issues with that pull request, but two pieces have already been merged that make retrying specs feasible outside of RSpec.</p>

<ul>
<li><a href="https://github.com/rspec/rspec-core/pull/610">#610</a>:
A fix for incorrect parsing input files specified via <code>-O</code>.</li>
<li><a href="https://github.com/rspec/rspec-core/pull/614">#614</a>:
A fix for making the <code>-e</code> option cumulative, so that one can pass multiple example names to run.</li>
</ul>


<p>Both will appear in the 2.11.0 version of RSpec, in the meantime you have to point your <code>rspec-core</code> dependency to the latest version on Github.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;rspec-core&quot;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/rspec/rspec-core.git&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to run <code>bundle update rspec-core</code>.</p>

<p>The strategy to retry failed specs is to output a file that contains a list of failed ones and to feed that file back to RSpec. The former can be accomplished with a custom logger. Create <code>spec/support/formatters/failures_formatter.rb</code>.</p>

<figure class='code'><figcaption><span>spec/support/formatters/failures_formatter.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/formatters/base_formatter&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">RSpec</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Core</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Formatters</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">FailuresFormatter</span> <span class="o">&lt;</span> <span class="no">BaseFormatter</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># create a file called rspec.failures with a list of failed examples</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">dump_failures</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">if</span> <span class="n">failed_examples</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;rspec.failures&quot;</span><span class="p">,</span> <span class="s2">&quot;w+&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">failed_examples</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">example</span><span class="o">|</span>
</span><span class='line'>            <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">retry_command</span><span class="p">(</span><span class="n">example</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">retry_command</span><span class="p">(</span><span class="n">example</span><span class="p">)</span>
</span><span class='line'>          <span class="n">example_name</span> <span class="o">=</span> <span class="n">example</span><span class="o">.</span><span class="n">full_description</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\\\&quot;</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="s2">&quot;-e </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">example_name</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to use the formatter, we must tell RSpec to <code>require</code> it with <code>--require</code> and to use it with <code>--format</code>. We don&#8217;t want to lose our settings in <code>.rspec</code> either - all these options can be combined in the Rake task.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:run&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">suite</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">fail_on_error</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">spec_opts</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;--require&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/support/formatters/failures_formatter.rb&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;--format&quot;</span><span class="p">,</span> <span class="s2">&quot;RSpec::Core::Formatters::FailuresFormatter&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s2">&quot;.rspec&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n+/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span><span class="o">.</span><span class="n">shellsplit</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">].</span><span class="n">flatten</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once a file is generated, we can feed it back to RSpec in another task, called <code>suite:suite[:id]:retry</code>.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:retry&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">suite</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">fail_on_error</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">spec_opts</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;-O&quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;rspec.failures&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;.rspec&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n+/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span><span class="o">.</span><span class="n">shellsplit</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">].</span><span class="n">flatten</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, lets combine the two tasks and invoke <code>retry</code> when the <code>run</code> task fails.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rspec_failures</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;rspec.failures&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_f</span> <span class="n">rspec_failures</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;spec:suite:</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:run&quot;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="k">unless</span> <span class="vg">$?</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">] Failed, retrying </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">rspec_failures</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n+/</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="si">}</span><span class="s2"> failure(s) in spec:suite:</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2"> ...&quot;</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;spec:suite:</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:retry&quot;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A complete version of our <code>test_suites.rake</code>, including a <code>spec:suite:all</code> task that executes all specs can be found <a href="https://gist.github.com/2597305">in this gist</a>. Our Jenkins CI runs <code>rake spec:suite:all</code>, with a much improved weather report since we started using this system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Making It Personal in iOS with Searchbars]]></title>
    <link href="http://artsy.github.com/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/"/>
    <updated>2012-05-11T20:52:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/11/on-making-it-personal&#8211;in-iOS-with-searchbars</id>
    <content type="html"><![CDATA[<p>We make Folio, a pretty kick-ass iPad app that we give away to our partners to showcase their inventory at art fairs. Whilst making it we tried to ensure that all of the application fits in with the <a href="http://art.sy">art.sy</a> website aesthetic, and recently the last natively styled control fell to our mighty code hammers. That was the <code>UISearchBar</code>.</p>

<p><img src="http://ortastuff.s3.amazonaws.com/images/custom_searchbar_example.jpg" alt="Screenshot of Artsy Folio" /></p>

<p>When displaying only search results in a table it makes a lot of sense to use Apple&#8217;s <code>UISearchDisplayController</code> as it handles a lot of edge cases for you. However the downside is that you lose some control over how the views interact.</p>

<p>The search bar was the only native control that actually made it into the version 1 release. This was mainly due to it requiring a bit of black magic in order to get it to work the way we wanted. So lets go through the code and rip it to pieces.</p>

<!--more-->


<p>First up, you&#8217;re going to want to make yourself a subclass of the <code>UISearchBar</code>, I&#8217;m going to be calling ours <code>ARSearchBar</code>. Here&#8217;s our public header.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ARSearchBar</span> : <span class="nc">UISearchBar</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Called from The SearchDisplayController Delegate</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">showCancelButton:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">show</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelSearchField</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the implementation file we declare private instance variables for keeping track of the textfield and the Cancel button. This is so we can avoid finding them in the view hierarchy when we want to change the frame it during resizing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ARSearchBar</span> <span class="p">(){</span>
</span><span class='line'>    <span class="n">UITextField</span> <span class="o">*</span><span class="n">foundSearchTextField</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UIButton</span> <span class="o">*</span><span class="n">overlayCancelButton</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, to look at setting the size we&#8217;ve found it easiest to deal with that in an overrode <code>setFrame</code> and setting the height of the new frame before it goes to the super class. As the search bar doesn&#8217;t change its height between state changes like text insertion it shouldn&#8217;t pose a problem to have it hardcoded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="n">frame</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ARSearchBarHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">setFrame:</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>What does pose a problem though is making sure that the subviews inside the search bar are positioned correctly with respect to the new height, this is amended in <code>layoutSubviews</code>. In our case the textfield should take up almost all of the search bar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">layoutSubviews</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// resize textfield</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ViewHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-=</span> <span class="n">ViewMargin</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up is that we can&#8217;t access our <code>foundSearchField</code> because it&#8217;s not been found yet! Personally,  I&#8217;m a big fan of using nibs for everything ( and pretty pumped about Storyboards too ) so we do our searching in <code>awakeFromNib</code> .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">awakeFromNib</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">awakeFromNib</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// find textfield in subviews</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nl">isSubclassOfClass:</span><span class="p">[</span><span class="n">UITextField</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">foundSearchTextField</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="n">subview</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a textfield, next up we want to stylize it. The perfect place for this is just after finding the textfield that you use to search in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">stylizeSearchTextField</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Sets the background to a static black by removing the gradient view</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// This is the gradient behind the textfield</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">description</span> <span class="nl">hasPrefix:</span><span class="s">@&quot;&lt;UISearchBarBackground&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subview</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// now change the search textfield itself</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">borderStyle</span> <span class="o">=</span> <span class="n">UITextBorderStyleNone</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">background</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">clearButtonMode</span> <span class="o">=</span> <span class="n">UITextFieldViewModeNever</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">leftView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">TextfieldLeftMargin</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">serifFontWithSize:</span><span class="n">ARFontSansLarge</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might be wondering why we removed the placeholder text? We needed more control over the style and positioning of the placeholder text and the search icon. These are easily controlled by the UISearchDisplayController subclass rather than inside the custom search bar. This is also the place that we can deal with having our custom Cancel button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">searchDisplayControllerWillBeginSearch:</span><span class="p">(</span><span class="n">UISearchDisplayController</span> <span class="o">*</span><span class="p">)</span><span class="n">controller</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">searchBar</span> <span class="nl">showCancelButton:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.2</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">searchPlaceholderLabel</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">searchDisplayControllerWillEndSearch:</span><span class="p">(</span><span class="n">UISearchDisplayController</span> <span class="o">*</span><span class="p">)</span><span class="n">controller</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">searchBar</span> <span class="nl">showCancelButton:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.2</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">searchPlaceholderLabel</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The corresponding code for showing and hiding the Cancel button is here. We just animate it in and out by a distance of 80.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">showCancelButton:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">show</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">show</span><span class="o">?</span> <span class="o">-</span><span class="n">CancelAnimationDistance</span> <span class="o">:</span> <span class="n">CancelAnimationDistance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.25</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">overlayCancelButton</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectOffset</span><span class="p">(</span><span class="n">overlayCancelButton</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The original Cancel button is something that we choose to keep around, rather than removing it form the view hierarchy, that&#8217;s so we can have our overlay Cancel button call its method instead of trying to replicate the cancel functionality ourselves.</p>

<p>To keep track of the Cancel button we need to know when its meant to appear, and when its meant to disappear. Because the Cancel button is created at runtime every time a search is started we need to
know when thats happening so we can hide it, we can do that by registering for <code>UITextFieldTextDidBeginEditingNotification</code> on the textfield once it&#8217;s been found. We do this in <code>awakeFromNib</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">removeOriginalCancel</span><span class="p">)</span> <span class="nl">name:</span><span class="n">UITextFieldTextDidBeginEditingNotification</span> <span class="nl">object:</span><span class="n">foundSearchTextField</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">removeOriginalCancel</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// remove the original button</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nl">isSubclassOfClass:</span><span class="p">[</span><span class="n">UIButton</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// This is called every time a search is began, </span>
</span><span class='line'>          <span class="c1">// so make sure to get the right button!</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">!=</span> <span class="n">ViewHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">subview</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we have the styling of the button. I&#8217;ve summed it up here as a lot of it is very application specific.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">createButton</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ARFlatButton</span> <span class="o">*</span><span class="n">cancelButton</span> <span class="o">=</span> <span class="p">[</span><span class="n">ARFlatButton</span> <span class="nl">buttonWithType:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">cancelButton</span> <span class="n">titleLabel</span><span class="p">]</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">sansSerifFontWithSize:</span><span class="n">ARFontSansSmall</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="s">@&quot;Cancel&quot;</span> <span class="n">uppercaseString</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cancelButton</span> <span class="nl">setTitle:</span><span class="n">title</span> <span class="nl">forState:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cancelButton</span> <span class="nl">setTitle:</span><span class="n">title</span> <span class="nl">forState:</span><span class="n">UIControlStateHighlighted</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">buttonFrame</span> <span class="o">=</span> <span class="n">cancelButton</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ViewHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">66</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">ViewMargin</span> <span class="o">+</span> <span class="n">CancelAnimationDistance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cancelButton</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">buttonFrame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cancelButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancelSearchField</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">overlayCancelButton</span> <span class="o">=</span> <span class="n">cancelButton</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">addSubview:</span><span class="n">overlayCancelButton</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">bringSubviewToFront:</span><span class="n">overlayCancelButton</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelSearchField</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// tap the original button!</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nl">isSubclassOfClass:</span><span class="p">[</span><span class="n">UIButton</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">!=</span> <span class="n">ViewHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">UIButton</span> <span class="o">*</span><span class="n">realCancel</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIButton</span> <span class="o">*</span><span class="p">)</span><span class="n">subview</span><span class="p">;</span>
</span><span class='line'>                <span class="p">[</span><span class="n">realCancel</span> <span class="nl">sendActionsForControlEvents:</span> <span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code is available <a href="https://gist.github.com/2667766">as a gist</a> under the MIT license.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Small with Big Data and Google Analytics]]></title>
    <link href="http://artsy.github.com/blog/2012/05/01/how-to-start-small-with-big-data-and-google-analytics/"/>
    <updated>2012-05-01T20:52:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/01/how-to-start-small-with-big-data-and-google-analytics</id>
    <content type="html"><![CDATA[<p>Why do so many companies write a homegrown pageviews tracking system? Between Google Analytics, Kissmetrics and many others, isn&#8217;t that a completely solved problem?</p>

<p>These popular solutions lack domain knowledge. They are easily capable of segmenting users by region or browser, but they fail to recognize rules core to your business. Tracking pageviews with a homegrown system becomes your next sprint&#8217;s goal.</p>

<p>Implementing a hit counter service is quite tricky. This is a write-heavy, asynchronous problem that must minimize impact on page rendering time, while dealing with rapidly growing amounts of data. Is there a middle ground between using Google Analytics and rolling out our own homegrown implementation? How can we use Google Analytics for data collection and inject domain knowledge into gathered data, incrementally, without writing our own service?</p>

<!--more-->


<p>Let&#8217;s write a Rake task that pulls data from Google Analytics. We can run it daily. Start with a Ruby gem called <a href="https://github.com/vigetlabs/garb">Garb</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;garb&quot;</span><span class="p">,</span> <span class="s2">&quot;0.9.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Garb requires Google Analytics credentials. Those can go into a YAML configuration file, which will use environment settings in production (it&#8217;s an ERB template, too). We can hardcode the test account values.</p>

<figure class='code'><figcaption><span>config/google_analytics.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span> <span class="nl">&amp;defaults</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">development, test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*defaults</span>
</span><span class='line'>  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="s">&quot;ga@example.com&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&quot;password&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ua</span><span class="p-Indicator">:</span> <span class="s">&quot;UA-12345678-1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*defaults</span>
</span><span class='line'>  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;GOOGLE_ANALYTICS_EMAIL&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;GOOGLE_ANALYTICS_PASSWORD&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ua</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;GOOGLE_ANALYICS_UA&#39;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Establish a Google Analytics session and fetch the profile corresponding to the Google user account with Garb.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;config/google_analytics.yml&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">)</span><span class="o">.</span><span class="n">result</span><span class="p">)</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">].</span><span class="n">symbolize_keys</span>
</span><span class='line'><span class="no">Garb</span><span class="o">::</span><span class="no">Session</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">config</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span> <span class="n">config</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">profile</span> <span class="o">=</span> <span class="no">Garb</span><span class="o">::</span><span class="no">Management</span><span class="o">::</span><span class="no">Profile</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">web_property_id</span> <span class="o">==</span> <span class="n">config</span><span class="o">[</span><span class="ss">:ua</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">raise</span> <span class="s2">&quot;missing profile </span><span class="si">#{</span><span class="n">config</span><span class="o">[</span><span class="ss">:ua</span><span class="o">]</span><span class="si">}</span><span class="s2"> in </span><span class="si">#{</span><span class="no">Garb</span><span class="o">::</span><span class="no">Management</span><span class="o">::</span><span class="no">Profile</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:web_property_id</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="n">profile</span>
</span></code></pre></td></tr></table></div></figure>


<p>Garbs needs a data model to collect pageviews. It extends <code>Garb::Model</code> and defines a set of &#8220;metrics&#8221; and &#8220;dimensions&#8221;.</p>

<figure class='code'><figcaption><span>app/models/google_analytics_pageviews.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GoogleAnalyticsPageviews</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Garb</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>  <span class="n">metrics</span> <span class="ss">:pageviews</span>
</span><span class='line'>  <span class="n">dimensions</span> <span class="ss">:page_path</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can play with the <a href="http://ga-dev-tools.appspot.com/explorer/">Google Analytics Query Explorer</a> to see the many possible metrics (such as pageviews) and dimensions (such as requested page path).</p>

<p>By default, Google Analytics lets clients retrieve 1000 records in a single request. To get all records we can add an iterator, called <code>all</code>, that will keep making requests until the server runs out of data. The code for <em>config/initializers/garb_model.rb</em> is <a href="https://gist.github.com/2265877">in this gist</a> and I made a <a href="https://github.com/vigetlabs/garb/pull/116">pull request</a> into Garb if you&#8217;d rather merge that onto your fork.</p>

<p>The majority of our pages are in the form of &#8220;/model/id&#8221;, for example &#8220;/artwork/leonardo-mona-lisa&#8221;. We&#8217;re interested in all pageviews for a given artwork and in pageviews for a given artist, at a given date. We&#8217;ll store selected Google Analytics data in a <code>GoogleAnalyticsPageviewsRecord</code> model described further.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="no">GoogleAnalyticsPageviews</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:start_date</span> <span class="o">=&gt;</span> <span class="n">t</span><span class="p">,</span> <span class="ss">:end_date</span> <span class="o">=&gt;</span> <span class="n">t</span> <span class="p">})</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="n">model</span> <span class="o">=</span> <span class="sr">/^\/#\!\/(?&lt;type&gt;[a-z-]+)\/(?&lt;id&gt;[a-z-]+)$/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">page_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">unless</span> <span class="p">(</span><span class="n">model</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;artwork&quot;</span> <span class="o">||</span> <span class="n">model</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;artist&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">GoogleAnalyticsPageviewsRecord</span><span class="o">.</span><span class="n">create!</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">:model_type</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:pageviews</span> <span class="o">=&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">pageviews</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:dt</span> <span class="o">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each <code>GoogleAnalyticsPageviewsRecord</code> contains the total pageviews for a given model ID at a given date. We now have a record for each artwork and artist. We can rollup existing data into a set of collections, incrementally. For example, <code>google_analytics_artworks_monthly</code> will contain the monthly hits for each artwork.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GoogleAnalyticsPageviewsRecord</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:model_type</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:model_id</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:pageviews</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:dt</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="no">Date</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">index</span> <span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="ss">:model_type</span><span class="p">,</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">ASCENDING</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="ss">:model_id</span><span class="p">,</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">ASCENDING</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="ss">:dt</span><span class="p">,</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">DESCENDING</span><span class="o">]</span>
</span><span class='line'>  <span class="o">]</span><span class="p">,</span> <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:rollup</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rollup</span>
</span><span class='line'>    <span class="no">Mongoid</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">&quot;google_analytics_</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">model_type</span><span class="si">}</span><span class="s2">s_total&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>      <span class="p">{</span> <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">model_id</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;$inc&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;count&quot;</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">pageviews</span> <span class="p">}},</span> <span class="p">{</span> <span class="ss">:upsert</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">:daily</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="ss">:weekly</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">beginning_of_week</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%W&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="ss">:monthly</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">beginning_of_month</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="ss">:yearly</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">beginning_of_year</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">dt</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">&quot;google_analytics_</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">model_type</span><span class="si">}</span><span class="s2">s_</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">model_id</span><span class="p">,</span> <span class="ss">:dt</span> <span class="o">=&gt;</span> <span class="n">dt</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;$inc&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;count&quot;</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">pageviews</span> <span class="p">}},</span> <span class="p">{</span> <span class="ss">:upsert</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rollup lets us query these tables directly. For example, the following query returns a record with the pageviews for the Leonardo&#8217;s &#8220;Mona Lisa&#8221; in January 2012.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Mongoid</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">&quot;google_analytics_artworks_monthly&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find_one</span><span class="p">({</span>
</span><span class='line'>  <span class="ss">:model_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;artwork&quot;</span><span class="p">,</span> <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="s2">&quot;leonardo-mona-lisa&quot;</span><span class="p">,</span> <span class="ss">:dt</span> <span class="o">=&gt;</span> <span class="s2">&quot;2012/01&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the obvious advantages of pulling Google Analytics data is the low volume of requests and offline processing. We&#8217;re letting Google Analytics do the hard work of collecting data for us in real time and are consuming its API without the performance or time pressures.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Trick: Adjusting Text Underlines]]></title>
    <link href="http://artsy.github.com/blog/2012/04/10/css-trick-adjusting-text-underlines/"/>
    <updated>2012-04-10T16:32:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/04/10/css-trick-adjusting-text-underlines</id>
    <content type="html"><![CDATA[<p>Often times people will use <em>border-bottom: 1px solid</em> in favor of <em>text-decoration: underline</em> to give their links some breathing room. But what if you&#8217;re giving it <em>too</em> much breathing room and want to adjust the height of that underline. With Adobe Garamond that happened to be the case, so we&#8217;ve come up with this little css trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">a</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This overlays a CSS pseudo element with a border-bottom that can be adjusted by changing margin-top.</p>

<p>For handling browsers that don&#8217;t support pseudo elements I recommend targeting them with the <a href="http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">Paul Irish class-on-html-trick</a>.</p>

<p>Let your links breathe!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplifying Model-Level JSON Versioning with Mongoid-Cached-Json]]></title>
    <link href="http://artsy.github.com/blog/2012/03/23/simplifying-model-level-json-versioning-with-mongoid-cached-json/"/>
    <updated>2012-03-23T09:14:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/03/23/simplifying-model-level-json-versioning-with-mongoid-cached-json</id>
    <content type="html"><![CDATA[<p>Did you know that Netflix has hundreds of API versions, one for each device? Daniel Jacobson&#8217;s <a href="http://www.slideshare.net/danieljacobson/techniques-for-scaling-the-netflix-api-qcon-sf">Techniques for Scaling the Netflix API</a> at QConSF 2011 explained why they chose this model. And while we don&#8217;t all build distributed services that supply custom-tailored data to thousands of heterogeneous TVs and set-top boxes, we do have to pay close attention to API versioning from day one.</p>

<p>Versioning is hard. Your data models evolve, but you must maintain backward-compatibility for your public interfaces. While many strategies exist to deal with this problem, we&#8217;d like to propose one that requires very little programming effort and that is more declarative in nature.</p>

<p>At Art.sy we use <a href="http://github.com/intridea/grape">Grape</a> and implement the &#8220;path&#8221; versioning strategy from the <a href="http://github.com/intridea/grape/tree/frontier">frontier</a> branch. Our initial v1 API is consumed by our own website and services and lives at <a href="https://artsyapi.com/api/v1">https://artsyapi.com/api/v1</a>. We&#8217;ve also prototyped v2 and by the time v1 is frozen, it should already be in production.</p>

<p>Grape takes care of version-based routing and has a system that lets you split version-based presentation of a model from the model implementation. I find that separation forcefully induced by unnecessary implementation complexity around wanting to return different JSON depending on the API version requested. What if implementing versioning in <code>as_json</code> were super simple?</p>

<p>Consider a Person model returned from a v1 API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">API</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="n">prefix</span> <span class="ss">:api</span>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:v1</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:person</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;:id&quot;</span>
</span><span class='line'>      <span class="no">Person</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">as_json</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">as_json</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In v2 the model split <code>:name</code> into a <code>:first</code> and <code>:last</code> name and in v3 <code>:name</code> has finally been deprecated. A version v3 Person model would look as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:first</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:last</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">as_json</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">first</span><span class="p">:</span> <span class="n">first</span><span class="p">,</span>
</span><span class='line'>      <span class="n">last</span><span class="p">:</span> <span class="n">last</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How can we combine these two implementations and write <code>Person.find(params[:id]).as_json({ :version =&gt; ? })</code>?</p>

<p>In <a href="http://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a> we&#8217;ve introduced a declarative way of versioning JSON. Here&#8217;s the code for Person v3.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">CachedJson</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:first</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:last</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="o">[</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span> <span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">json_fields</span> <span class="p">\</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="p">{</span> <span class="ss">:versions</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="ss">:v1</span><span class="p">,</span> <span class="ss">:v2</span> <span class="o">]</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">first</span><span class="p">:</span> <span class="p">{</span> <span class="ss">:versions</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="ss">:v2</span><span class="p">,</span> <span class="ss">:v3</span> <span class="o">]</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">last</span><span class="p">:</span> <span class="p">{</span> <span class="ss">:versions</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="ss">:v2</span><span class="p">,</span> <span class="ss">:v3</span> <span class="o">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the <a href="http://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a> gem you also get caching that respects JSON versioning, for free. Read about it <a href="http://artsy.github.com/blog/2012/02/20/caching-model-json-with-mongoid-cached-json/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Redirect Bang Hash Urls]]></title>
    <link href="http://artsy.github.com/blog/2012/03/06/how-to-redirect-bang-hash-urls/"/>
    <updated>2012-03-06T09:02:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/03/06/how-to-redirect-bang-hash-urls</id>
    <content type="html"><![CDATA[<p>Sometimes you type a hash-bang URL too fast, bang first.</p>

<p>Consider <code>http://art.sy/!#/log_in</code>. Rails will receive <code>/!</code> as the file path, resulting in a 404, File Not Found error. The part of the URL after the hash is a position within the page and is never sent to the web server.</p>

<p>It&#8217;s actually pretty easy to handle this scenario and redirect to the corresponding hash-bang URL.</p>

<p>The most straightforward way is to create a file called <code>!.html</code> in your <code>public</code> folder and use JavaScript to rewrite the URL with the bang-hash.</p>

<figure class='code'><figcaption><span>public/!.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'> <span class="nt">&lt;head&gt;</span>
</span><span class='line'> <span class="nt">&lt;/head&gt;</span>
</span><span class='line'> <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  Click <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">onclick=</span><span class="s">&quot;return window.redirect();&quot;</span><span class="nt">&gt;</span>here<span class="nt">&lt;/a&gt;</span> if you&#39;re not redirected ...
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">redirect</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;/#!&#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">redirect</span><span class="p">();</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'> <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also do this inside a controller with a view or layout. Start by trapping the URL in your <code>ApplicationController</code>.</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;/!&#39;</span>
</span><span class='line'>  <span class="n">render</span> <span class="n">layout</span><span class="p">:</span> <span class="s2">&quot;bang_hash&quot;</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The layout can have the piece of JavaScript that redirects to the corresponding hash-bang URL.</p>

<figure class='code'><figcaption><span>app/views/layouts/bang_hash.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">!!!</span>
</span><span class='line'><span class="o">-</span> <span class="n">ie_tag</span><span class="p">(</span><span class="ss">:html</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">%</span><span class="n">body</span>
</span><span class='line'>    <span class="ss">:javascript</span>
</span><span class='line'>      <span class="n">window</span><span class="o">.</span><span class="n">location</span> <span class="o">=</span> <span class="s1">&#39;/#!&#39;</span> <span class="o">+</span> <span class="n">window</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">hash</span><span class="o">.</span><span class="n">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can try this on <a href="http://art.sy/!#/log_in" target="_blank">http://art.sy/!#/log_in</a>. Watch it flip the bang-hash into a hash-bang and redirect to our login page. The redirect page could also be a good place to put an easter egg ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10x Rack and Rails Output Compression with Rack::Deflater]]></title>
    <link href="http://artsy.github.com/blog/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater/"/>
    <updated>2012-02-24T16:05:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater</id>
    <content type="html"><![CDATA[<p>You can quickly reduce the amount of data transferred from your Rack or Rails application with <a href="https://github.com/rack/rack/blob/master/lib/rack/deflater.rb">Rack::Deflater</a>. Anecdotal evidence shows a reduction from a 50Kb JSON response into about 6Kb. It may be a huge deal for your mobile clients.</p>

<p>For a Rails application, modify config/application.rb or config/environment.rb.</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Acme</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Deflater</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a Rack application, add the middleware in config.ru.</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Deflater</span>
</span><span class='line'><span class="n">run</span> <span class="no">Acme</span><span class="o">::</span><span class="no">Instance</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Note that the order of the middleware is very important. For example, we also use Rack::JSONP that adds automatic JSONP support to our API. It must be invoked before Rack::Deflater or it will attempt to wrap compressed content. Rack middleware is executed in reverse order [<a href="http://verboselogging.com/2010/01/20/proper-rack-middleware-ordering">source</a>].</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Deflater</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">JSONP</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple of handy RSpec tests to add to your application. You will need to modify this code with a valid API path and expected response.</p>

<figure class='code'><figcaption><span>spec/api/rack_deflater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Deflater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;produces an identical eTag whether content is deflated or not&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/api/acme&quot;</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Content-Encoding&quot;</span><span class="o">].</span><span class="n">should</span> <span class="n">be_nil</span>
</span><span class='line'>    <span class="n">etag</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Etag&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">content_length</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Content-Length&quot;</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/api/acme&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="p">{</span> <span class="s2">&quot;HTTP_ACCEPT_ENCODING&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;gzip&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Etag&quot;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="n">etag</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Content-Length&quot;</span><span class="o">].</span><span class="n">to_i</span><span class="o">.</span><span class="n">should_not</span> <span class="o">==</span> <span class="n">content_length</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Content-Encoding&quot;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;gzip&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;deflates JSONP content&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/api/acme?callback=parseResponse&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="p">{</span> <span class="s2">&quot;HTTP_ACCEPT_ENCODING&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;deflate&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Content-Encoding&quot;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;deflate&quot;</span>
</span><span class='line'>    <span class="n">inflated_response_body</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">Inflate</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">-</span><span class="no">Zlib</span><span class="o">::</span><span class="no">MAX_WBITS</span><span class="p">)</span><span class="o">.</span><span class="n">inflate</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inflated_response_body</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;parseResponse(...)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching Model JSON with Mongoid-Cached-Json]]></title>
    <link href="http://artsy.github.com/blog/2012/02/20/caching-model-json-with-mongoid-cached-json/"/>
    <updated>2012-02-20T13:06:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/02/20/caching-model-json-with-mongoid-cached-json</id>
    <content type="html"><![CDATA[<p>Consider the following two <a href="http://mongoid.org">Mongoid</a> domain models, <em>Widget</em> and <em>Gadget</em>.</p>

<figure class='code'><figcaption><span>widget.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Widget</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:gadgets</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>gadget.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Gadget</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:extras</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:widget</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And an API call that returns a collection of widgets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;widgets&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Widget</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">as_json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given many widgets, the API makes a subquery to fetch the corresponding gadgets for each widget.</p>

<p>Introducing <a href="https://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a>. This library mitigates several frequent problems with such code.</p>

<ul>
<li>Adds a declarative way of specifying a subset of fields to be returned part of <em>as_json</em>.</li>
<li>Avoids a large amount of subqueries by caching document JSONs participating in the parent-child relationship.</li>
<li>Provides a consistent strategy for restricting child documents&#8217; fields from being returned via the parent JSON.</li>
</ul>


<p>Using <em>Mongoid::CachedJson</em> we were able to cut our JSON API average response time by about a factor of 10. Find it <a href="https://github.com/dblock/mongoid-cached-json">on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reliably Testing Asynchronous UI w/ RSpec and Capybara]]></title>
    <link href="http://artsy.github.com/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/"/>
    <updated>2012-02-03T11:45:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara</id>
    <content type="html"><![CDATA[<p>tl;dr - You can write 632 rock solid UI tests with Capybara and RSpec, too.</p>

<p><img src="http://artsy.github.com/images/2012-02-03-reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/jenkins-ci.png" title="[Miami Weather in NYC]" ></p>

<p>We have exactly 231 integration tests and 401 view tests out of a total of 3086 in our core application today. This adds up to 632 tests that exercise UI. The vast majority use <a href="http://rspec.info/">RSpec</a> with <a href="https://github.com/jnicklas/capybara">Capybara</a> and <a href="http://seleniumhq.org/">Selenium</a>. This means that every time the suite runs we set up real data in a local MongoDB and use a real browser to hit a fully running local application, 632 times. The suite currently takes 45 minutes to run headless on a slow Linode, UI tests taking more than half the time.</p>

<p>While the site is in private beta (request your invite <a href="http://art.sy/request_invite">here</a>), you can get a glimpse of the complexity of the UI from the <a href="http://art.sy">splash page</a>. It&#8217;s a rich client-side Javascript application that talks to an API. You can open your browser&#8217;s developer tools and watch a combination of API calls and many asynchronous events.</p>

<p>Keeping the UI tests reliable is notoriously difficult. For the longest time we felt depressed under the Pacific Northwest -like weather of our Jenkins CI and blamed every possible combination of code and infrastructure for the many intermittent failures. We&#8217;ve gone on sprees of marking many such tests &#8220;pending&#8221; too.</p>

<p>We&#8217;ve learned a lot and stabilized our test suite. This is how we do UI testing.</p>

<!-- more -->


<h2>An Asynchronous Application</h2>

<p>The splash page on <a href="http://art.sy">art.sy</a> is a <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> application where views fade in and out depending on user actions. It also implements a responsive layout because some elements cannot render on mobile devices or shouldn&#8217;t depending on the size of your browser.</p>

<p>The application is initialized in a usual Backbone way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">Splash =</span>
</span><span class='line'>  <span class="nv">Views: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">Routers: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">Models: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">initialize: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">contentWindow = </span><span class="k">new</span> <span class="nx">@Models</span><span class="p">.</span><span class="nx">ContentWindow</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@router = </span><span class="k">new</span> <span class="nx">@Routers</span><span class="p">.</span><span class="nx">Client</span> <span class="nx">contentWindow</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">@Views</span><span class="p">.</span><span class="nx">Responsive</span> <span class="nx">contentWindow</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here, everything is asynchronous. The router will wire up the events and the different views that make up the page will render themselves.</p>

<h2>Testing a Login Form</h2>

<p>When a user clicks on a &#8220;Log In&#8221; link, he sees the <code>Splash.Views.Login</code> Backbone view. There&#8217;s no page reload or server roundtrip: the current view is swapped out by the Backbone view coming in. Some CSS animates the transition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Splash</span><span class="p">.</span><span class="nx">Routers</span><span class="p">.</span><span class="nx">Client</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">routes:</span>
</span><span class='line'>    <span class="s1">&#39;log_in&#39;</span> <span class="o">:</span> <span class="s1">&#39;log_in&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">log_in: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Splash.login = </span><span class="k">new</span> <span class="nx">Splash</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">Login</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@navigate</span> <span class="s1">&#39;log_in&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The log-in view has two input fields: an e-mail address and password. We can write a Capybara test that enters valid values and ensures that the user logged in by checking for a specific header.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature</span> <span class="s2">&quot;Log In&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;using a browser&quot;</span><span class="p">,</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">scenario</span> <span class="s2">&quot;allows a user to login&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>      <span class="n">click_link</span> <span class="s2">&quot;log_in&quot;</span>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s2">&quot;user[email]&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s2">&quot;user[password]&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">password</span>
</span><span class='line'>      <span class="n">click_button</span> <span class="s2">&quot;sign in&quot;</span>
</span><span class='line'>      <span class="n">find</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">,</span> <span class="ss">:visible</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;Login Successful&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test works well with Capybara, because it tries to wait for elements to appear on the page. For example, when you use <code>fill_in</code> it attempts to locate an element with the <code>user[email]</code> id, several times, until it times out or until the element is on the page.</p>

<h2>Waiting for Explicit Events</h2>

<p>The above test is &#8220;reliable&#8221; within some limits. It works as long as all the necessary asynchronous events run within a timeout period. But what if they don&#8217;t? What if the test hardware is taking a break from flushing to disk? Or waiting on Google Analytics when the network cable is unplugged, which shouldn&#8217;t affect the outcome of the test? These external issues make this code very brittle, so everyone keeps increasing the default timeout values.</p>

<p>A winning strategy to avoid this is to introduce explicit wait controls inside the tests. These wait <code>Capybara.default_wait_time</code> for a true result and no longer force you to know which method in Capybara waits for a timeout and which doesn&#8217;t. It effectively breaks up a single wait into multiple waits.</p>

<p>Consider a widget that needs to be saved by making a postback.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">@$el</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;saved&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;saving&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">@widget</span><span class="p">.</span><span class="nx">save</span>
</span><span class='line'>  <span class="nv">success: </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">@$el</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;saving&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;saved&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the widget is saved, its element will get a <code>.saved</code> CSS class. The test can wait for it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;saves the widget&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">widget_count</span> <span class="o">=</span> <span class="no">Widget</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s2">&quot;save&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="n">wait_until</span> <span class="p">{</span> <span class="n">find</span><span class="p">(</span><span class="s2">&quot;.saved&quot;</span><span class="p">,</span> <span class="n">visible</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">Widget</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">widget_count</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>There&#8217;s Just Too Much Going On</h2>

<p>Sometimes, waiting on explicit events is just not practical. You may have many AJAX requests going on at the same time and after those are done, you may still be executing JavaScript that modifies the DOM in meaningful ways. Lets attempt to answer the following two questions:</p>

<ul>
<li>How can we wait on all remaining AJAX requests to finish?</li>
<li>How can we wait on all remaining DOM events to finish?</li>
</ul>


<h2>Remaining AJAX Requests</h2>

<p>If you&#8217;re using jQuery, you can test the number of active connections to a server. The number is zero when all pending AJAX requests have finished. This was an original idea from <a href="http://pivotallabs.com/users/mgehard/blog/articles/1671-waiting-for-jquery-ajax-calls-to-finish-in-cucumber">Pivotal</a>.</p>

<figure class='code'><figcaption><span>spec/support/wait_for_ajax_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">wait_for_ajax</span><span class="p">(</span><span class="n">timeout</span> <span class="o">=</span> <span class="no">Capybara</span><span class="o">.</span><span class="n">default_wait_time</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">wait_until</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">evaluate_script</span> <span class="s1">&#39;jQuery.active == 0&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Remaining DOM Events</h2>

<p>This one is a bit tricker. We can leverage the fact that JavaScript engines are updating the UI on a single thread. If you defer an action it will execute after everything else that has been deferred before it. Therefore we can queue an addition of an empty DIV with a new id and finally wait for it. By using a unique ID we allow the waits to stack up nicely in a single spec.</p>

<figure class='code'><figcaption><span>spec/support/wait_for_dom_helper_.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">wait_for_dom</span><span class="p">(</span><span class="n">timeout</span> <span class="o">=</span> <span class="no">Capybara</span><span class="o">.</span><span class="n">default_wait_time</span><span class="p">)</span>
</span><span class='line'>  <span class="n">uuid</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">uuid</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">evaluate_script</span> <span class="o">&lt;&lt;-</span><span class="no">EOS</span>
</span><span class='line'><span class="sh">    _.defer(function() {</span>
</span><span class='line'><span class="sh">      $(&#39;body&#39;).append(&quot;&lt;div id=&#39;#{uuid}&#39;&gt;&lt;/div&gt;&quot;);</span>
</span><span class='line'><span class="sh">    });</span>
</span><span class='line'><span class="no">  EOS</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;#</span><span class="si">#{</span><span class="n">uuid</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do have to make sure that the body element is loaded, first. This allows a <code>wait_for_dom</code> right after we navigate to a page that executes AJAX queries on load.</p>

<h2>Combining Techniques</h2>

<p>With enough attention we were able to explain and fix most spec failures. When implementing Capybara tests we favor explicit waits and use the combination of the two wait functions above when we just want to generically make sure that everything on the page has loaded and is ready for more action.</p>

<p>Finally, integration tests are essential for continuous deployment. They are very much worth the extra development effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beyond Heroku: "Satellite" Delayed Job Workers on EC2]]></title>
    <link href="http://artsy.github.com/blog/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/"/>
    <updated>2012-01-31T11:45:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2</id>
    <content type="html"><![CDATA[<p>[TL;DR: To supplement Heroku-managed app servers, we launched custom EC2 instances to host Delayed Job worker processes. See the <a href="https://github.com/joeyAghion/satellite_setup">satellite_setup github repo</a> for rake tasks and Chef recipes that make it easy.]</p>

<p><a href="http://art.sy">Art.sy</a> engineers are big users and abusers of <a href="http://heroku.com">Heroku</a>. It&#8217;s a neat abstraction of server resources, so we were conflicted when parts of our application started to bump into Heroku&#8217;s limitations. While we weren&#8217;t eager to start managing additional infrastructure, we found that&#8211;with a few good tools&#8211;we could migrate some components away from Heroku without fragmenting the codebase or over-complicating our development environments.</p>

<p>There are a number of reasons your app might need to go beyond Heroku. It might rely on a locally installed tool (not possible on Heroku&#8217;s locked-down servers), or require heavy file-system usage (limited to <code>tmp/</code> and <code>log/</code>, and not permanent or shared). In our case, the culprit was Heroku&#8217;s 512 MB RAM limit&#8211;reasonable for most web processes, but quickly exceeded by the image-processing tasks of our <a href="https://github.com/collectiveidea/delayed_job">delayed_job</a> workers. We considered building a specialized image-processing service, but decided instead to supplement our web apps with a custom <a href="http://aws.amazon.com/ec2/">EC2</a> instance dedicated to processing background tasks. We call these servers &#8220;satellites.&#8221;</p>

<p>We&#8217;ll walk through the pertinent sections here, but you can find Rake tasks that correspond with these scripts, plus all of the necessary cookbooks, in the <a href="https://github.com/joeyAghion/satellite_setup">satellite_setup github repo</a>. Now, on to the code!</p>

<p>First, generate a key-pair from <a href="https://console.aws.amazon.com/ec2/home?#s=KeyPairs">Amazon&#8217;s AWS Management Console</a>. Then we&#8217;ll use <a href="http://fog.io">Fog</a> to spawn the EC2 instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fog&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Update these values according to your environment...</span>
</span><span class='line'><span class="no">S3_ACCESS_KEY_ID</span> <span class="o">=</span> <span class="s1">&#39;XXXXXXXXXXXXXXXXXXXX&#39;</span>
</span><span class='line'><span class="no">S3_SECRET_ACCESS_KEY</span> <span class="o">=</span> <span class="s1">&#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;</span>
</span><span class='line'><span class="no">KEY_NAME</span> <span class="o">=</span> <span class="s1">&#39;satellite_keypair&#39;</span>
</span><span class='line'><span class="no">KEY_PATH</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/.ssh/</span><span class="si">#{</span><span class="no">KEY_NAME</span><span class="si">}</span><span class="s2">.pem&quot;</span>
</span><span class='line'><span class="no">IMAGE_ID</span> <span class="o">=</span> <span class="s1">&#39;ami-c162a9a8&#39;</span>  <span class="c1"># 64-bit Ubuntu 11.10</span>
</span><span class='line'><span class="no">FLAVOR_ID</span> <span class="o">=</span> <span class="s1">&#39;m1.large&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">connection</span> <span class="o">=</span> <span class="no">Fog</span><span class="o">::</span><span class="no">Compute</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">provider</span><span class="p">:</span> <span class="s1">&#39;AWS&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span><span class="p">:</span> <span class="no">S3_ACCESS_KEY_ID</span><span class="p">,</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span><span class="p">:</span> <span class="no">S3_SECRET_ACCESS_KEY</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">servers</span><span class="o">.</span><span class="n">bootstrap</span><span class="p">(</span>
</span><span class='line'>  <span class="n">key_name</span><span class="p">:</span> <span class="no">KEY_NAME</span><span class="p">,</span>
</span><span class='line'>  <span class="n">private_key_path</span><span class="p">:</span> <span class="no">KEY_PATH</span><span class="p">,</span>
</span><span class='line'>  <span class="n">image_id</span><span class="p">:</span> <span class="no">IMAGE_ID</span><span class="p">,</span>
</span><span class='line'>  <span class="n">flavor_id</span><span class="p">:</span> <span class="no">FLAVOR_ID</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&#8217;ll do some basic server prep and install our preferred Ruby version.<!-- more --> We&#8217;ll again use Fog, this time to SSH into the new instance and run the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="sx">%{sudo sh -c &quot;grep &#39;^[^#].*us-east-1\.ec2&#39; /etc/apt/sources.list | sed &#39;s/us-east-1\.ec2/us/g&#39; &gt; /etc/apt/sources.list.d/better.list&quot;}</span><span class="p">,</span>
</span><span class='line'>  <span class="sx">%{sudo apt-get update; sudo apt-get install -y make gcc rsync curl zlib1g-dev libssl-dev libreadline-dev libreadline5}</span><span class="p">,</span>
</span><span class='line'>  <span class="sx">%{mkdir -p /tmp/bootstrap}</span><span class="p">,</span>
</span><span class='line'>  <span class="sx">%{cd /tmp/bootstrap &amp;&amp; curl -L &#39;ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p290.tar.gz&#39; | tar xvzf - &amp;&amp; cd ruby-1.9.2-p290 &amp;&amp; ./configure &amp;&amp; make &amp;&amp; sudo make install}</span><span class="p">,</span>
</span><span class='line'>  <span class="sx">%{cd /tmp/bootstrap &amp;&amp; curl -L &#39;http://production.cf.rubygems.org/rubygems/rubygems-1.6.2.tgz&#39; | tar xvzf - &amp;&amp; cd rubygems* &amp;&amp; sudo ruby setup.rb --no-ri --no-rdoc}</span><span class="p">,</span>
</span><span class='line'>  <span class="sx">%{sudo gem install rdoc chef ohai --no-ri --no-rdoc --source http://gems.rubyforge.org}</span>
</span><span class='line'><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="o">|</span>
</span><span class='line'>  <span class="n">server</span><span class="o">.</span><span class="n">ssh</span> <span class="n">command</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first command replaces some broken links in the AMI&#8217;s <code>/etc/apt/sources.list</code>, so that the later package installation commands have a chance. We then install a few necessary packages, download and install Ruby 1.9.2 from source, and install RubyGems. Finally, we install <a href="http://www.opscode.com/chef/">Chef</a> so we can let <code>chef-solo</code> drive the remainder of the configuration (and manage it going forward).</p>

<p>Chef deserves a few blog posts of its own, but know that it provides a platform-independent DSL for specifying an environment&#8217;s configuration. <a href="http://www.opscode.com">Opscode</a> supplies a deep set of related tools, but for our purposes, <code>chef-solo</code>&#8211;which applies a local set of configuration &#8220;cookbooks&#8221; to an individual server&#8211;will be plenty. These lines copy our local cookbooks folder (originally in <code>config/satellite</code>) up to a temporary location on the server, then execute the <code>chef-solo</code> command via SSH:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span> <span class="s2">&quot;rsync -rlP --rsh=</span><span class="se">\&quot;</span><span class="s2">ssh -i </span><span class="si">#{</span><span class="no">KEY_PATH</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2"> --delete --exclude &#39;.*&#39; ./config/satellite ubuntu@</span><span class="si">#{</span><span class="n">server</span><span class="o">.</span><span class="n">dns_name</span><span class="si">}</span><span class="s2">:/tmp/chef/&quot;</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="n">ssh</span> <span class="s2">&quot;cd /tmp/chef/satellite; RAILS_ENV=staging sudo -H -E chef-solo -c solo.rb -j configure.json -l info&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first file referenced in that command simply declares where cookbooks will be found. In our case, they&#8217;re stored alongside <code>solo.rb</code> in the temporary directory.</p>

<figure class='code'><figcaption><span>config/satellite/solo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookbook_path</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;cookbooks&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next file, <code>configure.json</code>, specifies that Chef should apply the <code>configure</code> recipe found in the <code>example_app</code> cookbook.</p>

<figure class='code'><figcaption><span>config/satellite/configure.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="s2">&quot;recipes&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;example_app::configure&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&#8217;s look at the <code>example_app::configure</code> recipe. First it will make sure necessary packages and gems are installed. These, of course, might be different for your app.</p>

<figure class='code'><figcaption><span>config/satellite/cookbooks/example_app/recipes/configure.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="s1">&#39;build-essential&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;binutils-doc&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;autoconf&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;flex&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;bison&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;openssl&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;libreadline5&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;libreadline-dev&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;git-core&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;zlib1g&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;zlib1g-dev&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;libssl-dev&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;libxml2-dev&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;autoconf&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;libxslt-dev&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;imagemagick&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;libmagick9-dev&#39;</span>
</span><span class='line'><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pkg</span><span class="o">|</span>
</span><span class='line'>  <span class="n">package</span><span class="p">(</span><span class="n">pkg</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem_package</span> <span class="s1">&#39;bundler&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">version</span> <span class="s1">&#39;1.0.10&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, it will ensure that a user and group (named for <code>example_app</code>) are created and configured:</p>

<figure class='code'><figcaption><span>config/satellite/cookbooks/example_app/recipes/configure.rb (cont&#8217;d)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="s1">&#39;example_app&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gid</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>  <span class="n">home</span> <span class="s1">&#39;/home/example_app&#39;</span>
</span><span class='line'>  <span class="n">shell</span> <span class="s1">&#39;/bin/bash&#39;</span>
</span><span class='line'>  <span class="n">supports</span> <span class="ss">:manage_home</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s1">&#39;/home/example_app/.ssh&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0700</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ensure example_app can sudo</span>
</span><span class='line'><span class="n">cookbook_file</span> <span class="s1">&#39;/etc/sudoers.d/example_app&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0440</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="s1">&#39;authorized_keys&#39;</span><span class="p">,</span>  <span class="c1"># place the keys you want to authorize for SSH in this file</span>
</span><span class='line'>  <span class="s1">&#39;id_dsa&#39;</span><span class="p">,</span>  <span class="c1"># a new private key file, authorized to pull from your git repo</span>
</span><span class='line'>   <span class="s1">&#39;config&#39;</span>  <span class="c1"># avoid prompt when pulling from github</span>
</span><span class='line'><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">config_file</span><span class="o">|</span>
</span><span class='line'>  <span class="n">cookbook_file</span> <span class="s2">&quot;/home/example_app/.ssh/</span><span class="si">#{</span><span class="n">config_file</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0600</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Allow other developers to SSH as primary ubuntu account as well.</span>
</span><span class='line'><span class="n">cookbook_file</span> <span class="s2">&quot;/home/ubuntu/.ssh/authorized_keys&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;ubuntu&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;ubuntu&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0600</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, it creates supporting directories.</p>

<figure class='code'><figcaption><span>config/satellite/cookbooks/example_app/recipes/configure.rb (cont&#8217;d)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="s1">&#39;/app&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/app/example_app&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/app/example_app/shared&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/app/example_app/shared/log&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/app/example_app/shared/pids&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/app/example_app/shared/config&#39;</span>
</span><span class='line'><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>  <span class="n">directory</span> <span class="n">dir</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0755</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We rely heavily on the <a href="http://newrelic.com/">New Relic</a> plug-in, and want to enable it in our custom environment as well. Heroku usually takes care of injecting a <code>newrelic.yml</code> configuration file into our app servers, so we&#8217;ll have to replicate that in our custom environment. Depending on what plug-ins you&#8217;ve enabled (e.g., <a href="http://sendgrid.com">Sendgrid</a>), you might need to replicate other configuration files or initializers.</p>

<figure class='code'><figcaption><span>config/satellite/cookbooks/example_app/recipes/configure.rb (cont&#8217;d)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookbook_file</span> <span class="s2">&quot;/app/example_app/shared/config/newrelic.yml&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0755</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mmonit.com/monit/">Monit</a> is a great tool for starting, managing, and monitoring long-running processes. It can be configured with all sorts of thresholds and alerting. (We&#8217;ve included only a simple configuration in the <a href="https://github.com/joeyAghion/satellite_setup">github repo</a> for now.) Let&#8217;s include the <code>monit</code> recipe, to ensure that monit is installed and running, and then add the necessary configuration for monit to start and monitor our delayed_job worker process.</p>

<figure class='code'><figcaption><span>config/satellite/cookbooks/example_app/recipes/configure.rb (cont&#8217;d)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;monit&#39;</span>
</span><span class='line'><span class="n">monitrc</span> <span class="s1">&#39;delayed_job&#39;</span><span class="p">,</span> <span class="p">{},</span> <span class="ss">:immediately</span>
</span></code></pre></td></tr></table></div></figure>


<p>To keep disk space from becoming a problem, we&#8217;ll automatically rotate all of the logs in our app&#8217;s shared <code>log/</code> directory.</p>

<figure class='code'><figcaption><span>config/satellite/cookbooks/example_app/recipes/configure.rb (cont&#8217;d)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">logrotate_app</span> <span class="s2">&quot;example_app&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">path</span> <span class="s2">&quot;/app/example_app/shared/log/*.log&quot;</span>
</span><span class='line'>  <span class="n">frequency</span> <span class="s2">&quot;daily&quot;</span>
</span><span class='line'>  <span class="n">rotate</span> <span class="mi">30</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;example_app::deploy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last line loads up the neighboring <code>deploy.rb</code> recipe, which is responsible for checking out the appropriate version of the codebase to the server and [re]starting the delayed_job worker:</p>

<figure class='code'><figcaption><span>config/satellite/cookbooks/example_app/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deploy</span> <span class="s2">&quot;/app/example_app&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">repo</span> <span class="s2">&quot;git@github.com:my_org/example_app.git&quot;</span>  <span class="c1"># update this!</span>
</span><span class='line'>  <span class="n">branch</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;rails_env&#39;</span><span class="o">]</span>  <span class="c1"># assumes a branch named for this RAILS_ENV (e.g., staging, production)</span>
</span><span class='line'>  <span class="n">shallow_clone</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">environment</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;rails_env&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">symlinks</span> <span class="s1">&#39;pids&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tmp/pids&#39;</span><span class="p">,</span> <span class="s1">&#39;log&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;log&#39;</span><span class="p">,</span> <span class="s1">&#39;config/newrelic.yml&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;config/newrelic.yml&#39;</span>
</span><span class='line'>  <span class="n">before_restart</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">current_release</span> <span class="o">=</span> <span class="n">release_path</span>
</span><span class='line'>    <span class="n">execute</span><span class="p">(</span><span class="s2">&quot;bundle install --without development test&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">cwd</span> <span class="n">current_release</span>
</span><span class='line'>      <span class="n">user</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>      <span class="n">group</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>      <span class="n">environment</span> <span class="s1">&#39;HOME&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/home/example_app&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">restart_command</span> <span class="p">{</span> <span class="n">execute</span> <span class="s2">&quot;monit restart delayed_job&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">user</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;example_app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>deploy</code> Chef command creates a new timestamped directory under <code>/app/example_app/releases</code> and cleans up any older release directories, leaving the most recent 5 (much in the style of <a href="https://github.com/capistrano/capistrano">Capistrano</a>). It also symlinks necessary directories and files and restarts the delayed_job worker.</p>

<p>Did you notice how we ensure that Heroku and the satellite use the same version of the codebase? We&#8217;ve formalized <code>staging</code> and <code>production</code> branches and update them with the commits we intend to deploy. Of course, we can&#8217;t simply <code>git push heroku master</code> anymore. Instead, we push to the appropriate branch, then push that to heroku and re-run the satellite&#8217;s <code>deploy</code> recipe. Here, we&#8217;ve wrapped the process up into a single <code>deploy:[staging|production]</code> rake task. (The precise branches might vary depending on your development workflow.)</p>

<figure class='code'><figcaption><span>lib/tasks/deploy.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Merge master into a staging branch and deploy it to example_app-staging.&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:staging</span> <span class="o">=&gt;</span> <span class="s1">&#39;git:tag:staging&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="sb">`git push git@heroku.com:example_app-staging.git origin/staging:master`</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;staging&#39;</span>
</span><span class='line'>    <span class="n">task</span><span class="p">(</span><span class="s1">&#39;satellite:deploy&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Merge staging into a production branch and deploy it to example_app-production.&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:production</span> <span class="o">=&gt;</span> <span class="s1">&#39;git:tag:production&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="sb">`git push git@heroku.com:example_app-production.git origin/production:master`</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'>    <span class="n">task</span><span class="p">(</span><span class="s1">&#39;satellite:deploy&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:git</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:tag</span><span class="p">,</span> <span class="o">[</span><span class="ss">:from</span><span class="p">,</span> <span class="ss">:to</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:confirm_clean</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Must specify &#39;from&#39; and &#39;to&#39; branches&quot;</span> <span class="k">unless</span> <span class="n">args</span><span class="o">[</span><span class="ss">:from</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span>
</span><span class='line'>    <span class="sb">`git fetch`</span>
</span><span class='line'>    <span class="sb">`git branch -f </span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="sb"> origin/</span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="sb">`git checkout </span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="sb">`git reset --hard origin/</span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:from</span><span class="o">]</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Updating </span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="s2"> with these commits:&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="sb">`git log origin/</span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="sb">..</span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="sb"> --format=format:&quot;%h  %s  (%an)&quot;`</span>
</span><span class='line'>    <span class="sb">`git push -f origin </span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="sb">`git checkout master`</span>
</span><span class='line'>    <span class="sb">`git branch -D </span><span class="si">#{</span><span class="n">args</span><span class="o">[</span><span class="ss">:to</span><span class="o">]</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:confirm_clean</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Must have clean working directory&quot;</span> <span class="k">unless</span> <span class="sb">`git status`</span> <span class="o">=~</span> <span class="sr">/working directory clean/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:tag</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span> <span class="ss">:staging</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">task</span><span class="p">(</span><span class="s1">&#39;git:tag&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="s1">&#39;master&#39;</span><span class="p">,</span>  <span class="s1">&#39;staging&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">task</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">task</span><span class="p">(</span><span class="s1">&#39;git:tag&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="s1">&#39;staging&#39;</span><span class="p">,</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our satellite requires access to some of the same environment variables as our Heroku web apps (such as a database host or mail server credentials). To keep these synchronized, we rely on a <code>config/heroku.yml</code> file. (This duplication is an obvious hazard and deserves improvement, but we&#8217;ve actually found it convenient to have these locally for easy access from Rake tasks, etc.)</p>

<p>In the <a href="https://github.com/joeyAghion/satellite_setup">satellite_setup</a> github repo, we&#8217;ve simplified this set-up into a few tasks that we use on an ongoing basis:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake satellite:spawn <span class="nv">RAILS_ENV</span><span class="o">=</span>staging
</span><span class='line'><span class="nv">$ </span>rake satellite:configure <span class="nv">RAILS_ENV</span><span class="o">=</span>staging
</span><span class='line'><span class="nv">$ </span>rake satellite:info <span class="nv">RAILS_ENV</span><span class="o">=</span>staging
</span><span class='line'>  1 satellite server<span class="o">(</span>s<span class="o">)</span>
</span><span class='line'>      state: running <span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>          i-f4583196  staging ec2-170-179-113-159.compute-1.amazonaws.com 2012-01-03 14:48:11 UTC
</span><span class='line'><span class="nv">$ </span>rake satellite:deploy <span class="nv">RAILS_ENV</span><span class="o">=</span>staging
</span><span class='line'><span class="nv">$ </span>rake satellite:destroy <span class="nv">RAILS_ENV</span><span class="o">=</span>staging
</span></code></pre></td></tr></table></div></figure>


<p>This arrangement has worked for us so far. Satellite servers cost a little more, but can benefit from arbitrary customization and are served out of the same data-centers as our Heroku-based web apps and S3 storage. Since the same app is running transparently in 2 different environments, our developers&#8217; workflow has hardly needed modification. In fact, the portability enforced by Heroku&#8217;s design (elaborated in <a href="http://12factor.net">The Twelve-Factor App</a>) made this transition relatively straightforward.</p>

<p>Some worthy enhancements might be:</p>

<ul>
<li>Improving monitoring and notifications</li>
<li>Extending the recipes to manage multiple parallel workers</li>
<li>Using Chef attributes to replace uses of <code>example_app</code> with a parameter</li>
<li>Cleaning up the duplication of Heroku configuration values in <code>heroku.yml</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delaying CarrierWave Image Processing]]></title>
    <link href="http://artsy.github.com/blog/2012/01/31/delaying-carrierwave-image-processing/"/>
    <updated>2012-01-31T08:31:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/31/delaying-carrierwave-image-processing</id>
    <content type="html"><![CDATA[<p>We do a lot of image processing at Art.sy. We have tens of thousands of beautiful original high resolution images from our partners and treat them with care. The files mostly come from professional art photographers, include embedded color profiles and other complicated features that make image processing a big deal.</p>

<p>Once uploaded, these images are converted to JPG, resized into many versions and often resampled. We are using <a href="https://github.com/jnicklas/carrierwave">CarrierWave</a> for this process - our typical image uploader starts like a usual CarrierWave implementation with a few additional features.</p>

<!-- more -->


<ul>
<li>Fallback to a well-known image when an image is missing</li>
<li>Support for a local development environment, S3 and CloudFront</li>
<li>Image versioning: replaced images get a new path to bust CloudFront caching</li>
</ul>


<p>Here&#8217;s the complete source.</p>

<figure class='code'><figcaption><span>app/models/image_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ImageUploader</span> <span class="o">&lt;</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">RMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># default url for a missing image</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_url</span>
</span><span class='line'>    <span class="s2">&quot;/assets/images/shared/missing_image.png&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># a local path for development environments w/o S3 or CloudFront</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">local_path</span>
</span><span class='line'>    <span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CLOUDFRONT_URL&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;&quot;</span> <span class="p">:</span> <span class="s2">&quot;local/&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># complete url to an image version</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">image_url_format_string</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">image_url_prefix</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">store_path_base</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">model</span><span class="p">)</span><span class="si">}</span><span class="s2">:version.jpg&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># a whitelist for uploading</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">extension_white_list</span>
</span><span class='line'>    <span class="sx">%w(jpg jpeg png gif tif tiff bmp)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># alternate temporary location for Heroku</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cache_dir</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">/tmp/uploads&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># relative path for saving a file</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store_path</span><span class="p">(</span><span class="n">for_file</span> <span class="o">=</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">local_path</span><span class="si">}#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">store_path_base</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">model</span><span class="p">)</span><span class="si">}#{</span><span class="p">(</span><span class="n">version_name</span> <span class="o">||</span> <span class="ss">:original</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">.jpg&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># normalized file name for an image converted to JPG</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">filename</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="p">?</span> <span class="k">super</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="s1">&#39;.jpg&#39;</span> <span class="p">:</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># a location that includes a version number</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">store_path_base</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>    <span class="n">class_name</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">underscore</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'>    <span class="n">image_version</span> <span class="o">=</span> <span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">image_version</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">image_version</span><span class="si">}</span><span class="s2">/&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">class_name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">image_version</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># a url prefix depending on environment settings</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">image_url_prefix</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;IMAGES_URL&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;IMAGES_URL&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CLOUDFRONT_URL&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CLOUDFRONT_URL&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="s2">&quot;http://</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">.s3.amazonaws.com&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;/local&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We derive actual uploaders from the <code>ImageUploader</code> class.</p>

<figure class='code'><figcaption><span>app/models/widget_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WidgetUploader</span> <span class="o">&lt;</span> <span class="no">ImageUploader</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">process</span> <span class="ss">:increment_version</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increment_version</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">is_processing_delayed?</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">image_version</span> <span class="o">=</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">image_version</span><span class="o">.</span><span class="n">to_i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">image_versions</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:small</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:is_processing_delayed?</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:convert</span> <span class="o">=&gt;</span> <span class="s1">&#39;jpg&#39;</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="o">]</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:quality</span> <span class="o">=&gt;</span> <span class="mi">70</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:square</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:is_processing_delayed?</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:convert</span> <span class="o">=&gt;</span> <span class="s1">&#39;jpg&#39;</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:resize_to_fill</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">230</span><span class="p">,</span> <span class="mi">230</span><span class="o">]</span>
</span><span class='line'>    <span class="n">process</span> <span class="ss">:quality</span> <span class="o">=&gt;</span> <span class="mi">90</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the uploader is mounted via <code>mount_uploader</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mount_uploader</span> <span class="ss">:image</span><span class="p">,</span>  <span class="no">WidgetUploader</span><span class="p">,</span> <span class="n">delayed</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll notice a few unusual things here. The versions have an <code>:if</code> condition and there&#8217;re mentions of <code>is_processing_delayed?</code>. This comes from a small module <a href="https://github.com/joeyAghion/">@joeyAghion</a> wrote called <code>DelayedImageProcessing</code>. It&#8217;s a much more evolved version designed on top of <a href="http://code.dblock.org/carrierwave-delayjob-processing-of-selected-versions">my earlier idea</a> of delaying some image processing for background jobs.</p>

<p>The reason we want to delay image processing is because it takes a long time. The Heroku HTTP request limit is only 30 seconds, so image upload would regularly timeout. And some of the large images can take up to ten minutes to process - we don&#8217;t want the user to wait that long.</p>

<p>To use, you will add some code in <code>config/initializers/carrierwave.rb</code> and add <code>DelayedImageProcessing</code> into <code>lib</code>.</p>

<ul>
<li><a href="https://gist.github.com/1710609#file_delayed_image_processing.rb">lib/delayed_image_processing.rb</a></li>
<li><a href="https://gist.github.com/1710609#file_carrierwave.rb">config/initializers/carrierwave.rb</a></li>
</ul>


<p>The code above works with Mongoid. You will have to do some work to make this work with other storage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Art.sy Uses Github to Build Art.sy]]></title>
    <link href="http://artsy.github.com/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/"/>
    <updated>2012-01-29T14:26:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy</id>
    <content type="html"><![CDATA[<p><a href="http://zachholman.com/">Zach Holman</a> gave a good talk on <a href="http://zachholman.com/talk/how-github-uses-github-to-build-github">How Github uses Github to build Github</a> at Rubyconf. It was great to hear how similar our own processes are at Art.sy, with a few notable differences.</p>

<p>Art.sy engineers store almost everything on Github. We use Github Wikis, but don&#8217;t use Github Issues much. We work in 3-week sprints with <a href="http://pivotaltracker.com/">Pivotal Tracker</a> instead. This blog is on Github. And, of course, we have our own Hubot which feeds funny animated GIFs after each successful deploy to our IRC channel.</p>

<p>The most interesting part for me was around these two slides.</p>

<p><img src="http://artsy.github.com/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull.png" title="[Github Pull]" >
<img src="http://artsy.github.com/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-fork.png" title="[Github Fork]" ></p>

<p>Zach emphasized that you don&#8217;t need forks to make pull requests. While technically true, I find forks particularly useful to keep things clean.</p>

<p>At Art.sy we use personal forks to work on features, create topical branches and make pull requests into the master from there. This is the workflow of the vast majority of open-source projects too. Now, Zach is right, you don&#8217;t want to create any second class developers - our entire team has write access to the master. We use pull requests from forks to do peer code reviews, even for trivial things. I would typically make a pull request including the person I&#8217;d like to code review my changes in the title. Here&#8217;s an example.</p>

<p><img src="http://artsy.github.com/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull-request.png" title="[Targeted Pull Request]" ></p>

<p>(Notice the use of hash rocket. Zach, Ruby has transcended our lives too.)</p>

<p>Working on forks keeps developer branches away from &#8220;master&#8221;. The main repository only has three branches: &#8220;master&#8221;, &#8220;staging&#8221; and &#8220;production&#8221; and each developer can make up whatever branching strategy they like in individual forks.</p>

<p>Code reviews have nothing to do with hierarchy or organization, any developer will code review any other developer&#8217;s work. We tend to avoid using the same person for two subsequent code reviews to prevent excessive buddying. Zach called his pull requests &#8220;collective experiments&#8221; - a place for active discussions, rejections and praise. I really like that. Each of my rejected pull requests has been a great learning experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress and Jekyll]]></title>
    <link href="http://artsy.github.com/blog/2012/01/18/octopress-and-jekyll/"/>
    <updated>2012-01-18T23:03:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/18/octopress-and-jekyll</id>
    <content type="html"><![CDATA[<p>This blog is powered by static pages.</p>

<p>I think it&#8217;s quite ironic that, while we spend a lot of time building complex large scale dynamic websites, our new favorite publishing platform is a system that compiles static content. But, in many ways, <a href="http://octopress.org/">Octopress</a> and <a href="https://github.com/mojombo/jekyll">Jekyll</a> fit our philosophy and developer workflow perfectly. Writing an article for this blog means using the same tools and processes as contributing to a project on Github. And everyone is welcome to browse and learn from <a href="https://github.com/artsy/artsy.github.com/tree/source">the source</a> of this blog, and even fork it and contribute fixes to the layout or even blog features.</p>

<p>Here&#8217;s what Art.sy engineers do to get setup (once) and publish a new post.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:artsy/artsy.github.com.git
</span><span class='line'> Cloning into artsy.github.com...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>artsy.github.com
</span><span class='line'>
</span><span class='line'>artsy.github.com<span class="nv">$ </span>git checkout <span class="nb">source</span>
</span><span class='line'><span class="nb"> </span>Branch <span class="nb">source set </span>up to track remote branch <span class="nb">source </span>from origin.
</span><span class='line'> Switched to a new branch <span class="s1">&#39;source&#39;</span>
</span><span class='line'>
</span><span class='line'>artsy.github.com<span class="nv">$ </span>mkdir _deploy
</span><span class='line'>
</span><span class='line'>artsy.github.com<span class="nv">$ </span><span class="nb">cd </span>_deploy
</span><span class='line'>
</span><span class='line'>artsy.github.com/_deploy<span class="nv">$ </span>git init
</span><span class='line'> Initialized empty Git repository in artsy.github.com/_deploy/.git/
</span><span class='line'>
</span><span class='line'>artsy.github.com/_deploy<span class="nv">$ </span>git remote add origin git@github.com:artsy/artsy.github.com.git
</span><span class='line'>
</span><span class='line'>artsy.github.com/_deploy<span class="nv">$ </span>git pull origin master
</span><span class='line'> From github.com:artsy/artsy.github.com
</span><span class='line'>  * branch            master     -&gt; FETCH_HEAD
</span><span class='line'>
</span><span class='line'>artsy.github.com/_deploy<span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class='line'>
</span><span class='line'>artsy.github.com<span class="nv">$ </span>rake create_post<span class="o">[</span><span class="s2">&quot;Octopress and Jekyll&quot;</span><span class="o">]</span>
</span><span class='line'> Creating new post: <span class="nb">source</span>/_posts/2012-01-18-octopress-and-jekyll.md
</span><span class='line'>
</span><span class='line'>artsy.github.com<span class="nv">$ </span>git commit -am <span class="s2">&quot;Octopress and Jekyll&quot;</span>
</span><span class='line'> 1 files changed, 52 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 <span class="nb">source</span>/_posts/2012-01-18-octopress-and-jekyll.md
</span><span class='line'>
</span><span class='line'>artsy.github.com<span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>(If you&#8217;re confused by the setup, check out <a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">this post</a>).</p>

<p>We believe in simple systems and love the opportunity to understand technology in-depth. Everything you see, short of the blog content and styles, is written in Ruby by very smart people. The source is open and free, which helps us learn and make progress, together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Layouts with CSS3]]></title>
    <link href="http://artsy.github.com/blog/2012/01/17/responsive-layouts-with-css3/"/>
    <updated>2012-01-17T11:03:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/17/responsive-layouts-with-css3</id>
    <content type="html"><![CDATA[<p>All of the <a href="http://sass-lang.com/">SCSS</a> stylesheets used to design this blog compile down to one file (view the source of this page and check out screen.css), and there isn&#8217;t any JavaScript affecting the layout. But there are really three versions of this page. If you&#8217;re reading this on a smartphone, what you see is almost entirely different from what you would see if you were reading this in a full screen browser. If you&#8217;re on a computer, try making this page full screen and slowly resize it to make it smaller. You&#8217;ll first notice that the Art.sy logo disappears just before it would cover the text in the main column. Keep reducing the viewport and eventually the page will snap into a mobile format with the Art.sy logo centered at the top, followed by the centered header text and mobile search box all above the index of recent posts.</p>

<h2>The Philosophy</h2>

<p>Why bother? It&#8217;s true that smartphone web browsers are pretty advanced and certainly can handle rendering the full version of this blog. But there&#8217;s a big difference between ensuring a site works and creating a good experience for your audience regardless of the device they&#8217;re using. If anything, advances in the mobile web make responsive layouts like the one on this blog even more necessary — as it becomes more and more likely that your users are viewing your site on a handheld screen, it becomes less acceptable to force your audience to zoom way into your page and follow the text with their thumbs.</p>

<p>The key to a good mobile design is to fix at least one axis — it&#8217;s fine if the user has to scroll down or to the right to see the rest of the content, but making the user scroll diagonally means that the layout doesn&#8217;t fit the screen. For text-heavy sites like this blog, it&#8217;s best to just allow vertical scrolling. Aside from this consideration, links, text fields, and buttons must be large enough to allow for easy navigation with thumbs. The font size may need to be adjusted to optimize viewing on a mobile screen. On a Mac, you can use mobile Safari on the iPhone Simulator that comes with <a href="http://developer.apple.com/xcode/">Xcode</a> to see how your site will look on a phone.</p>

<h2>Media Queries</h2>

<p>The good news is that these responsive layouts aren&#8217;t difficult to implement. When I set out to theme this <a href="http://octopress.org/">Octopress</a> blog, our designer gave me two comps, one for the full version of the site and the other for the mobile version. The first step towards a responsive layout is to notice common elements between the two designs. If you compare the two versions of the blog, you&#8217;ll notice that they contain essentially the same content. This means that we need only one template file for both designs, and definitely do not need to resort to creating a whole mobile subdomain to serve different content to small screens. For elements that aren&#8217;t the same in the two designs, we can simply hide them by setting <code>display: none</code> for devices where the elements shouldn&#8217;t be shown. I used this technique in a couple of places on the blog: the right sidebar is hidden on the mobile version, while the mobile search bar (which differs from the search bar on the side in that it has placeholder text and appears in the main content <code>div</code>) isn&#8217;t displayed on the full version of the site.</p>

<p>But how do you apply different styles to the same elements depending on the size of the browser&#8217;s viewport? There are a couple of ways, but by far the cleanest way is to use CSS3 media queries. Media queries allow developers to apply different styles to elements on a page depending on the media on which they are displayed, whether that medium is a screen, a projection, print, braille, etc. The most common use of media queries, however, is to create responsive layouts. Media queries come after an <code>@media</code> declaration. Directly after comes the definition of the media type: we&#8217;re concerned with creating responsive layouts for screens, and as a result, we&#8217;ll declare our styles under <code>@media screen</code>. To apply custom styles based on the size of the screen, we&#8217;ll use media features, which come after the keyword <code>and</code> and are enclosed in parentheses. Here&#8217;s the SCSS code used to style the Art.sy logo on this blog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nn">#lrg-mark</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">background-image</span><span class="o">:</span> <span class="sx">url(&quot;../images/Logo.png&quot;)</span><span class="p">;</span>
</span><span class='line'>    <span class="na">background-repeat</span><span class="o">:</span> <span class="no">no-repeat</span><span class="p">;</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>    <span class="na">height</span><span class="o">:</span> <span class="mi">92</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">249</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="nd">:</span> <span class="nt">482px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">left</span><span class="o">:</span> <span class="mi">35</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>      <span class="na">position</span><span class="o">:</span> <span class="no">fixed</span><span class="p">;</span>
</span><span class='line'>      <span class="na">top</span><span class="o">:</span> <span class="mi">15</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="nd">:</span> <span class="nt">1280px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="nd">:</span> <span class="nt">482px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="nd">:</span> <span class="nt">481px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span> <span class="no">auto</span> <span class="mi">20</span><span class="kt">px</span> <span class="no">auto</span><span class="p">;</span>
</span><span class='line'>      <span class="na">background-position</span><span class="o">:</span> <span class="no">center</span> <span class="no">top</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The styles that are common to all viewports are written outside of <code>@media</code> declarations at the top of the styles for <code>#lrg-mark</code> — regardless of the screen size, we want the logo to be the same image and the same size, and we don&#8217;t want to display the span inside of the div that contains fallback text. The rest of the styles are given in media queries: for a large viewport, we want the logo fixed in the upper right corner, for slightly smaller viewports, we want it to disappear, and for mobile viewports, we want it centered on the screen. Note that 481px is a magic number: it&#8217;s the width of an iPhone in landscape mode.</p>

<p>The media features <code>max-width</code> and <code>min-width</code> are a little misleading: they don&#8217;t mean the maximum or minimum possible width of the user&#8217;s screen. It&#8217;s best to think of <code>max-</code> as &#8220;less-than-or-equal-to&#8221; and <code>min-</code> as &#8220;greater-than-or-equal-to.&#8221; See <a href="http://www.w3.org/TR/css3-mediaqueries/">the W3C&#8217;s website</a> for a complete reference on CSS media queries.</p>

<h2>Making It Cross-Browser</h2>

<p>CSS3 media queries are awesome, but even though all the latest versions of the major browsers support them, it&#8217;s very likely that a portion of your site&#8217;s visitors will be using browsers that don&#8217;t support these new CSS features. Luckily, this problem has already been solved by great people who like to give away things for free. Just include <a href="https://github.com/Modernizr/Modernizr">modernizr.js</a> on your page, and it will provide a JavaScript fallback for media queries, as well as for many other potentially unsupported CSS3 features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://artsy.github.com/blog/2012/01/05/hello-world/"/>
    <updated>2012-01-05T19:34:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/05/hello-world</id>
    <content type="html"><![CDATA[<p>We&#8217;ve been building cool stuff at <a href="http://art.sy">Art.sy</a> and are looking forward to sharing all things tech with you.</p>
]]></content>
  </entry>
  
</feed>
