<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Art.sy Engineering]]></title>
  <link href="http://artsy.github.com/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2012-12-08T12:56:40-05:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Art.sy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Measuring Performance in Grape APIs with NewRelic RPM]]></title>
    <link href="http://artsy.github.com/blog/2012/11/29/measuring-performance-in-grape-apis-with-new-relic/"/>
    <updated>2012-11-29T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/11/29/measuring-performance-in-grape-apis-with-new-relic</id>
    <content type="html"><![CDATA[<p>Knowing how well your API performs in real time is essential to any successful project. That&#8217;s because you can&#8217;t fix what you can&#8217;t measure.</p>

<p>We use and heavily contribute to <a href="http://github.com/intridea/grape">Grape</a>, a Ruby API DSL. Grape is a Rack middleware and we have been reporting API performance data to <a href="http://newrelic.com/">NewRelic</a> with code from <a href="http://code.dblock.org/new-relic-performance-instrumentation-with-grape-api">my older blog post</a>.</p>

<p>It&#8217;s time to improve the reporting implementation and address performance monitoring in both development and production environments. Here&#8217;s what a single API request breakdown is going to look like.</p>

<p><img src="http://artsy.github.com/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/transaction-detail.png"></p>

<!-- more -->


<h2>NewRelic RPM</h2>

<p>The first step is to add the <code>newrelic_rpm</code> gem to Gemfile, which implements the actual realtime performance reporting to NewRelic. We also use <a href="https://github.com/mongoid/mongoid">Mongoid</a> and the <a href="https://github.com/mongoid/moped">Moped</a> MongoDB Ruby driver, which can be instrumented with <code>newrelic_moped</code>.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;newrelic_moped&quot;</span><span class="p">,</span> <span class="s2">&quot;0.0.3&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;newrelic_rpm&quot;</span><span class="p">,</span> <span class="s2">&quot;3.3.3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will need <code>config/newrelic.yml</code> in your application. Ours can be found in <a href="https://gist.github.com/4170458">this gist</a> and works well both locally and on Heroku.</p>

<h2>Instrumenting Grape</h2>

<p>In the past we used <a href="https://gist.github.com/1233422">NewRelic::Agent::Instrumentation::API</a>, which works for any generic Rack middleware. This would report all API calls to NewRelic, but would treat requests to <em>/api/artist/andy-warhol</em> and <em>/api/artist/wassily-kandinsky</em> as unrelated. That is because the instrumenter is a Rack middleware that wraps Grape requests <em>before</em> they reach Grape. The only information available is the request URL, and not the actual API route that is going to be matched when the request is processed.</p>

<p>We want both requests to <em>/api/artist/andy-warhol</em> and <em>/api/artist/wassily-kandinsky</em> to be treated as <em>/api/artist/:id</em>. Lets insert a middleware inside Grape itself, once the URL has been matched to a route.</p>

<figure class='code'><figcaption><span>api.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">API</span> <span class="o">&lt;&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="n">use</span> <span class="no">ApiNewRelicInstrumenter</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new instrumenter has access to the current API endpoint via <code>env['api.endpoint']</code> and reports data via NewRelic&#8217;s <code>ControllerInstrumentation</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApiNewRelicInstrumenter</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">Middleware</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">NewRelic</span><span class="o">::</span><span class="no">Agent</span><span class="o">::</span><span class="no">Instrumentation</span><span class="o">::</span><span class="no">ControllerInstrumentation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="n">trace_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">category</span><span class="p">:</span> <span class="ss">:rack</span><span class="p">,</span>
</span><span class='line'>      <span class="n">path</span><span class="p">:</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;api.endpoint&#39;</span><span class="o">].</span><span class="n">routes</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">route_path</span><span class="p">,</span>
</span><span class='line'>      <span class="n">request</span><span class="p">:</span> <span class="n">request</span><span class="p">,</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">perform_action_with_newrelic_trace</span><span class="p">(</span><span class="n">trace_options</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">yield</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code for <code>ApiNewRelicInstrumenter</code> can be found in <a href="https://gist.github.com/4170469">this gist</a>. It supports enabling and disabling performance reporting by setting <code>NEW_RELIC_ID</code> and works around NewRelic&#8217;s method name limitations (these cannot contain slashes).</p>

<h2>Development Environment</h2>

<p>You can now see NewRelic performance data in development mode, too. If you mount Grape inside Rails run <code>NEW_RELIC_ID=foo rails s</code>. Navigate to <em>http://localhost:3000/newrelic</em> to see your local traces.</p>

<p><img src="http://artsy.github.com/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/developer-mode.png"></p>

<p>Drill into an individual request to find several detailed breakdowns of how time was spent, including specific MongoDB queries (under &#8220;SQL&#8221;, naturally).</p>

<p><img src="http://artsy.github.com/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/sql-detail.png"></p>

<p>NewRelic is a commercial product, but you can run development mode for free! Note that enabling this will triple your local Rails boot time: we enable development mode by setting <code>development_mode: &lt;%= !!ENV['NEW_RELIC_ID'] %&gt;</code> in <a href="https://gist.github.com/4170458">newrelic.rpm</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendly URLs with Mongoid::Slug]]></title>
    <link href="http://artsy.github.com/blog/2012/11/22/friendly-urls-with-mongoid-slug/"/>
    <updated>2012-11-22T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/11/22/friendly-urls-with-mongoid-slug</id>
    <content type="html"><![CDATA[<p>All Art.sy URLs shared publicly are humanly readable. For example, you&#8217;ll find all Barbara Kruger&#8217;s works at <a href="http://art.sy/artist/barbara-kruger">art.sy/artist/barbara-kruger</a> and a post by Hyperallergic entitled &#8220;Superfluous Men Can&#8217;t Get No Satisfaction&#8221; at <a href="http://art.sy/hyperallergic/post/superfluous-men-cant-get-no-satisfaction">art.sy/hyperallergic/post/superfluous-men-cant-get-no-satisfaction</a>. This is a lot prettier than having <code>id=42</code> in the browser&#8217;s address and is a big improvement for SEO.</p>

<p><img src="http://artsy.github.com/images/2012-11-22-friendly-urls-with-mongoid-slug/barbara-kruger.png"></p>

<p>We construct these URLs with a gem called <a href="https://github.com/digitalplaywright/mongoid-slug">mongoid_slug</a>. Interesting implementation details under the cut.</p>

<!-- more -->


<h2>Mongoid-Slug Basics</h2>

<p>Include the gem in Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;mongoid_slug&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.0.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The basic functionality of mongoid-slug is achieved by adding the <code>Mongoid::Slug</code> a mixin and declaring a slug.</p>

<figure class='code'><figcaption><span>post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Slug</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:author</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">slug</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">history</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">scope</span><span class="p">:</span> <span class="ss">:author</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:published</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="no">Boolean</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This adds a <code>_slugs</code> field of type <code>Array</code> into the <code>Post</code> model. Every time the title of the post changes, a new slug is generated and, depending on the value of the <code>history</code> option, either replaces the existing slug or appends the new slug to the array of slugs. A database index ensures that these are unique: two posts of the same title will have different slugs, such as &#8220;post-1&#8221; and &#8220;post-2&#8221;. Our example is also scoped to the author of the post.</p>

<p>You can now find this post by <code>_id</code> or <code>slug</code> with the same <code>find</code> method. And with <code>history: true</code>, you can find a document by any of its older slugs!</p>

<figure class='code'><figcaption><span>post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># find by ID</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;47cc67093475061e3d95369d&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># find by slug</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;superfluous-men-cant-get-no-satisfaction&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mongoid-slug is smart enough to figure out whether you&#8217;re querying by a <code>Moped::BSON::ObjectId</code> or a slug. Performance-wise the lookup by slug is cheap: mongoid_slug ensures an index on <code>_slugs</code>. This all works, of course, because MongoDB builds a B-tree index atop all elements in each <code>_slugs</code> array.</p>

<p>The <code>find</code> method will naturally respect Mongoid&#8217;s <code>raise_not_found_error</code> option and either raise <code>Mongoid::Errors::DocumentNotFound</code> or return <code>nil</code> in the case the document cannot be found.</p>

<h2>Avoiding Too Many Slugs</h2>

<p>Users writing posts may want to edit them many times before they are published. This can potentially create a large number of unnecessary slugs. We&#8217;ve used a simple trick to generate slugs only after a post has been published by defaulting the slug of an unpublished post to its <code>_id</code>. Mongoid-slug will append <code>-1</code> to such slugs, so we monkey-patch <code>Mongoid::Slug::UniqueSlug</code> with the code in <a href="https://gist.github.com/4131766">this gist</a>. Special care must be taken not to destroy a slug of a post that has been published earlier, then unpublished.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">slug</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:published</span><span class="p">,</span> <span class="n">scope</span><span class="p">:</span> <span class="ss">:author</span><span class="p">,</span> <span class="n">history</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">p</span><span class="o">.</span><span class="n">published?</span> <span class="o">||</span> <span class="nb">p</span><span class="o">.</span><span class="n">has_slug?</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_slug?</span>
</span><span class='line'>  <span class="o">!</span> <span class="n">slug</span><span class="o">.</span><span class="n">blank?</span> <span class="o">&amp;&amp;</span> <span class="n">slug</span> <span class="o">!=</span> <span class="nb">id</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The parameters to <code>slug</code> include all fields that may cause the slug to change. When a post is published by setting <code>published</code> to <code>true</code>, the slug will be re-generated with a call to <code>build_slug</code> as long as the <code>published</code> field is included in that list.</p>

<p>Please note an interesting discussion about allowing model ids in the <code>_slugs</code> <a href="https://github.com/digitalplaywright/mongoid-slug/pull/91">here</a>.</p>

<h2>Caching by Slug</h2>

<p>Because slugs can now change, but lookups by old slugs should hit the cache, caching by slug makes cache invalidation difficult. A two-layered cache that maps slugs to ids and then caches objects by id can solve this at the expense of an additional cache lookup. We have yet to implement this in <a href="https://github.com/artsy/garner">Garner</a>, see <a href="https://github.com/artsy/garner/issues/13">#13</a>.</p>

<h2>International Slugs</h2>

<p>We have a large international audience with names and posts in all kinds of languages. An escaped UTF-8 URL would be much worse than a BSON ObjectId. Fortunately, mongoid-slug uses <a href="https://github.com/rsl/stringex">stringex</a> under the hood. This gem defines <code>to_url</code> and rewrites special symbols and transliterates strings from many languages into English. Here&#8217;re some examples of generated slugs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;ITCZ 1 (21°17ʼ51.78”N / 89°35ʼ28.18”O / 26-04-08 / 09:00 am)&quot;</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'><span class="c1"># =&gt; itcz-1-21-degrees-17-51-dot-78-n-slash-89-degrees-35-28-dot-18-o-slash-26-04-08-slash-09-00-am</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;“水／火”系列 No.8&quot;</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'><span class="c1"># =&gt; &quot;shui-slash-huo-xi-lie-no-dot-8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;трактат по теории этики&quot;</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'><span class="c1"># =&gt; &quot;traktat-po-tieorii-etiki&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty amazing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Monitor 503s and Timeout Requests on Heroku]]></title>
    <link href="http://artsy.github.com/blog/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/"/>
    <updated>2012-11-15T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku</id>
    <content type="html"><![CDATA[<p>We have recently started hitting an unusually high number of &#8220;503: Service Unavailable&#8221; errors with one of our applications on Heroku. What are these? How can we monitor their quantity and frequency? What&#8217;s the fix?</p>

<p><img src="http://artsy.github.com/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-error.png"></p>

<!-- more -->


<h2>What does 503 mean?</h2>

<p>A 503 error means &#8220;Service Unavailable&#8221;. Heroku returns a 503 error when an HTTP request times out between the Heroku routing mesh and your application, including when the application failed to boot. This timeout limit is set to 30 seconds, as <a href="https://devcenter.heroku.com/articles/request-timeout">documented by Heroku</a>, and shows up in the logs as follows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Nov 14 12:10:50 production heroku/router:
</span><span class='line'> Error H12 (Request timeout) -&gt; GET art.sy/api/spline
</span><span class='line'> dyno=web.11 queue= wait= service=30000ms status=503 bytes=0</span></code></pre></td></tr></table></div></figure>


<p>This usually means that the application could not process the request fast enough, and in very rare cases, that there&#8217;s an infrastructure problem with Heroku itself. A 504 error which means &#8220;Gateway Timeout&#8221; would have probably been a more appropriate choice. Either way, the root cause could be something as simple as trying to run a very long database query or do too much work that doesn&#8217;t fit in a 30 seconds window. It could also involve an external service that didn&#8217;t respond quickly enough. Your mileage may vary.</p>

<h2>Monitoring 503s</h2>

<p>503 errors don&#8217;t happen within your application, they are reported by the routing mesh. They will not appear in internal monitoring systems attached to your app, including <a href="http://newrelic.com/">NewRelic</a>.</p>

<p>We get the frequency of 503s by sending our Heroku logs to <a href="https://papertrailapp.com/">Papertrail</a> and using their <a href="http://help.papertrailapp.com/kb/how-it-works/alerts">alerts feature</a> to push the number of 503s to <a href="http://www.geckoboard.com/">Geckoboard</a>. You can send these to <a href="http://graphite.wikidot.com/">Graphite</a> or any other monitoring system in the same manner.</p>

<p>This is what it looks like:</p>

<p><img src="http://artsy.github.com/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-geckoboard.png"></p>

<h2>Aborting Requests</h2>

<p>When Heroku reports a 503 status code, it just gives up. Your application continues executing the request though, often to completion, which may take forever. In the meantime, Heroku will send a new request to the dyno that&#8217;s still busy, and get a new 503. This is known as a &#8220;stuck&#8221; dyno.</p>

<p>To prevent dynos from being stuck you must abort the request within the 30 second period. This can be accomplished with the <a href="https://github.com/kch/rack-timeout">rack-timeout</a> gem and setting <code>Rack::Timeout.timeout = 29</code> in an initializer (or a smaller value within which you want to guarantee a response). The gem automatically inserts itself into a Rails application, but you will need to manually mount it in other Rack apps, such as those using <a href="https://github.com/intridea/grape">Grape</a>.</p>

<figure class='code'><figcaption><span>api.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Timeout</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Returns a reticulated spline.&quot;</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;spline/:id&quot;</span>
</span><span class='line'>    <span class="no">Spline</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because your application is now getting a timeout exception, you can also report it in NewRelic. The following works in Grape.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rescue_from</span> <span class="no">Timeout</span><span class="o">::</span><span class="no">Error</span><span class="p">,</span> <span class="ss">:backtrace</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>  <span class="no">NewRelic</span><span class="o">::</span><span class="no">Agent</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">error_collector</span><span class="o">.</span><span class="n">notice_error</span> <span class="n">e</span><span class="p">,</span>
</span><span class='line'>    <span class="n">uri</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
</span><span class='line'>    <span class="n">referer</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">referer</span><span class="p">,</span>
</span><span class='line'>    <span class="n">request_params</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">params</span>
</span><span class='line'>  <span class="n">rack_response</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;timeout_error&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;The request timed out.&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">to_json</span><span class="p">,</span> <span class="mi">503</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to write a test!</p>

<figure class='code'><figcaption><span>api_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Api</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;times out after Rack::Timeout.timeout&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Rack</span><span class="o">::</span><span class="no">Timeout</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:timeout</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Spline</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:find</span><span class="p">)</span> <span class="p">{</span> <span class="nb">sleep</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/spline/1&quot;</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">503</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;{&quot;type&quot;:&quot;timeout_error&quot;,&quot;message&quot;:&quot;The request timed out.&quot;}&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fixing Timeouts</h2>

<p>The root causes of timeouts are specific to your application. Our general approach for long running requests is to offload the request processing into a delayed job or background process and &#8220;cook&#8221; data in a way that makes it readily available to API endpoints. You can read more about this and related aspects of our system architecture in <a href="http://artsy.github.com/blog/2012/10/10/artsy-technology-stack/">this earlier blog post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The perils of iOS user agent strings]]></title>
    <link href="http://artsy.github.com/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/"/>
    <updated>2012-10-18T15:19:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing</id>
    <content type="html"><![CDATA[<p>There is a great deal of misinformation on the web about detecting an
iPad or an iPhone in JavaScript. The
<a href="http://stackoverflow.com/a/4617648">top answer on stackoverflow</a> -
and many <a href="http://www.sitepoint.com/identify-apple-iphone-ipod-ipad-visitors/">blog posts</a> using <a href="http://www.askdavetaylor.com/detect_apple_iphone_user_web_site_server.html">this technique</a> - are all incorrect.</p>

<p>The conventional wisdom is that iOS devices have a user agent for
Safari and a user agent for the UIWebView. This assumption is
incorrect as iOS apps can and do
<a href="http://stackoverflow.com/a/8666438">customize their user agent</a>. The
main offender here is Facebook, whose iOS app alone accounts for about
1-3% of Art.sy&#8217;s daily traffic.</p>

<p>Compare these user agent strings from iOS devices:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iOS Safari
</span><span class='line'>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3
</span><span class='line'>iPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3
</span><span class='line'>
</span><span class='line'># UIWebView
</span><span class='line'>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/98176
</span><span class='line'>iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8B117
</span><span class='line'>
</span><span class='line'># Facebook UIWebView
</span><span class='line'>iPad: Mozilla/5.0 (iPad; U; CPU iPhone OS 5_1_1 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1.1;FBBV/4110.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.1.1;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]
</span><span class='line'>iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; ru_RU) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1;FBBV/4100.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; tablet;FBLC/en_US]</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<p>The old way to identify iPhone / iPad in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">IS_IPAD</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPad/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="nx">IS_IPHONE</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPhone/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPod/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you were to go with this approach for detecting iPhone and iPad,
you would end up with IS_IPHONE <em>and</em> IS_IPAD both being true if a user
comes from Facebook on an iPad. That could create some odd behavior!</p>

<p>The correct way to identify iPhone / iPad in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">IS_IPAD</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPad/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="nx">IS_IPHONE</span> <span class="o">=</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPhone/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPod/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">IS_IPAD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">IS_IPHONE</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We simply declare <code>IS_IPHONE</code> to be <code>false</code> on iPads to cover for the
bizarre Facebook UIWebView iPad user agent. This is one example of how
<em>user agent sniffing is unreliable</em>. The more iOS apps that customize
their user agent, the more issues user agent sniffing will have. If
you can avoid user agent sniffing (hint: CSS Media Queries), DO
IT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So you want to do a CSS3 3D transform?]]></title>
    <link href="http://artsy.github.com/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform/"/>
    <updated>2012-10-18T00:00:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform</id>
    <content type="html"><![CDATA[<p>This post details the first of many challenges we faced in 3D
transforming the <a href="http://art.sy">homepage of Art.sy</a> (inspired by
<a href="https://github.com/hakimel/meny">Meny</a>): detecting CSS 3D transform
support.</p>

<p>Front-end development is messy in today&#8217;s fragmented world. At Art.sy,
our goal is to do what it takes to provide an incredible experience
for <em>all</em> of our users (IE8+, iOS and the usual suspects). Deploying
bleeding edge tech, like CSS 3D transforms, is an exercise in
compromising principals for practicality &#8211; and managing these
&#8220;compromises&#8221; in well-documented code.</p>

<p>We looked to <a href="http://modernizr.com/">Modernizr&#8217;s</a> feature detection approach to provide us with
a reliable way to detect CSS3 3D transform support across browsers. They have some
<a href="https://github.com/Modernizr/Modernizr/issues/590">well</a>-
<a href="https://github.com/Modernizr/Modernizr/issues/465">documented</a>
<a href="https://github.com/Modernizr/Modernizr/issues/240">struggles</a> around
the issue. After flipping most of the tables in the office ┻━┻ ︵ヽ
(`Д´)ﾉ︵﻿ ┻━┻ , we settled on user agent sniffing as the most robust
method for detecting CSS3 3D transform support. But why did none
of the available methods work for us?</p>

<!-- more -->


<p>CSS3 3D transforms involve interaction between the browser and the
graphics card. The browser may be able to parse the 3D declarations
but may not be able to properly instruct the graphics card in how to
render your page. There are many possible outcomes ranging from the
page rendering with lines across it (Safari 4) to the page rendering
beautifully then crashing the browser seconds later (Safari on
iOS4). Any &#8216;feature detection&#8217; approach would unacceptably flag these
as &#8216;supports CSS3 3D transforms&#8217;. This is one case where &#8216;feature
detection&#8217; fails and user agent sniffing (and lots of testing) wins
hands down.</p>

<p>Most feature detection assumes a &#8220;supports&#8221; or &#8220;does not support&#8221;
binary. This is not the case with CSS3 3D transforms &#8211; there is a
&#8220;gradient of support&#8221;. Additionally, enabling 3D transforms causes the
page to be re-rendered in an entirely different rendering engine which
then causes other problems (more on this in a later post).</p>

<p>CSS3 3D transform support can be separated into 4 levels:</p>

<ol>
<li>Reliably supports 3D transforms across most machines. For example:
Safari 6.</li>
<li>Can parse and apply 3D transform declarations but ignores the 3D
parts. For example: Chrome on a Retina MacBook Pro.</li>
<li>Can parse and apply 3D transform declarations but renders in
unacceptable ways. For example: Safari 4 and Safari 4/5 on Windows
show lines across the page.</li>
<li>Cannot apply 3D transform declarations in any way. For example:
IE or Firefox &lt; v10.</li>
</ol>


<p>Here are a few popular ways of detecting CSS3 3D transform support and why
they don&#8217;t work for us:</p>

<p><em>Meny / Hakim&#8217;s method</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># apply these styles to the body in css then see if they are applied in JS</span>
</span><span class='line'><span class="nv">docStyle = </span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span>
</span><span class='line'><span class="nv">supports3DTransforms = </span> <span class="s1">&#39;WebkitPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;MozPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;msPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;OPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;perspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works best and is straightforward code. The only
issue is that it throws a positive for iOS4 causing the browser to
crash and a positive for Safari on Windows and Safari 4 OSX which both
display a grid over the page when using the 3D renderer.</p>

<p><em>iScroll4 method</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">has3D = </span><span class="o">-&gt;</span> <span class="s1">&#39;WebKitCSSMatrix&#39;</span> <span class="k">in</span> <span class="nb">window</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;m11&#39;</span> <span class="k">in</span> <span class="k">new</span> <span class="nx">WebKitCSSMatrix</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This only works reliably Safari in our testing.</p>

<p><em>Modernizer method</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ret = </span><span class="o">!!</span><span class="nx">testPropsAll</span><span class="p">(</span><span class="s1">&#39;perspective&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nx">ret</span> <span class="o">and</span> <span class="s1">&#39;webkitPerspective&#39;</span> <span class="k">in</span> <span class="nx">docElement</span><span class="p">.</span><span class="nx">style</span> <span class="p">)</span>
</span><span class='line'>  <span class="c1"># create a dib and see if it moves</span>
</span><span class='line'>  <span class="nx">injectElementWithStyles</span><span class="p">(</span><span class="s1">&#39;@media (transform-3D), (-webkit-transform-3D){#modernizr{left:9px;position:absolute;height:3px;}}&#39;</span><span class="p">,</span> <span class="nf">(node, rule) -&gt;</span>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">node</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">===</span> <span class="mi">9</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">offsetHeight</span> <span class="o">===</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a div, transforms it, and then checks if it&#8217;s position
has changed as expected. It only works in reliably in Safari.
It <a href="https://github.com/Modernizr/Modernizr/issues/590">sometimes works in Chrome</a>
but throws a false positive in the case of Chrome on Retina MacBook
Pro as the element does move &#8211; just not in 3D space.</p>

<p><em>User Agent method</em></p>

<p>We want to maintain wide support of new tech while ensuring all users
have a great experience. Modernizr and the feature detection group
have their heart in the right place and do a great job most of the
time. That said, user agent sniffing is the only way to handle the
complex support scenarios inherent in bleeding edge CSS3 tech such as
3D transforms.</p>

<p>Here is our method/hack for identifying browsers that support CSS3 3D
transforms well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">(</span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">docElement = </span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span>
</span><span class='line'>  <span class="nv">uagent = </span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">browsers = </span><span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;webkit&#39;</span><span class="p">,</span>  <span class="mi">530</span><span class="p">]</span>        <span class="c1"># not well supported in Safari 4, Safari 5 webkit version is 530.17</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;chrome&#39;</span><span class="p">,</span>  <span class="mi">12</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;mozilla&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;opera&#39;</span><span class="p">,</span>   <span class="kc">Infinity</span><span class="p">]</span>   <span class="c1"># not supported</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;msie&#39;</span><span class="p">,</span>    <span class="kc">Infinity</span><span class="p">]</span> <span class="p">]</span> <span class="c1"># not supported</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># From: http://api.jquery.com/jQuery.browser</span>
</span><span class='line'>  <span class="nv">uaMatch = </span><span class="nf">(ua) -&gt;</span>
</span><span class='line'>    <span class="nv">match =</span>
</span><span class='line'>      <span class="sr">/(chrome)[ \/]([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="sr">/(webkit)[ \/]([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="sr">/(opera)(?:.*version|)[ \/]([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="sr">/(msie) ([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;compatible&quot;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">and</span> <span class="sr">/(mozilla)(?:.*? rv:([\w.]+)|)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span> <span class="nx">ua</span> <span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span> <span class="nv">browser: </span><span class="p">(</span><span class="nx">match</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">or</span> <span class="s2">&quot;&quot;</span><span class="p">),</span> <span class="nv">version: </span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">?</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">or</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">addNo3DTransform = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">docElement.className = </span><span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">replace</span> <span class="s1">&#39;csstransforms3D&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; no-csstransforms3D&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">add3DTransform = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">docElement.className = </span><span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">replace</span> <span class="s1">&#39;no-csstransforms3D&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; csstransforms3D&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># default to no CSS3 3D transform support</span>
</span><span class='line'>  <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">match = </span><span class="nx">uaMatch</span> <span class="nx">uagent</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">browser</span> <span class="k">in</span> <span class="nx">browsers</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">browser</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nx">match</span><span class="p">.</span><span class="nx">browser</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">match</span><span class="p">.</span><span class="nx">version</span> <span class="o">&gt;=</span> <span class="nx">browser</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nx">add3DTransform</span><span class="p">()</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">IS_IPHONE = </span><span class="nx">uagent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">or</span> <span class="nx">uagent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;ipod&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="nv">IS_IPAD = </span><span class="nx">uagent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;ipad&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="nv">IS_IOS = </span><span class="nx">IS_IPHONE</span> <span class="o">or</span> <span class="nx">IS_IPAD</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># iOS 6 is our support cut off for iPad</span>
</span><span class='line'>  <span class="nv">match = </span><span class="sr">/\os ([0-9]+)/</span><span class="p">.</span><span class="nx">exec</span> <span class="nx">uagent</span>
</span><span class='line'>  <span class="nv">IS_LT_IOS6 = </span><span class="nx">match</span> <span class="o">and</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">and</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 3D transforms are supported but do not work well on iPhone</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">IS_IPHONE</span>
</span><span class='line'>    <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># disable 3D transform for older versions of Safari on iPad</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="nx">IS_IPAD</span> <span class="o">and</span> <span class="nx">IS_LT_IOS6</span>
</span><span class='line'>    <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># deactivate 3D transform for Safari on Windows</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;Safari&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">and</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;Windows&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'><span class="p">)()</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you would like to take issue with or improve this code please check
it out <a href="https://github.com/zamiang/detect-css3-3D-transform">on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Art.sy's Technology Stack]]></title>
    <link href="http://artsy.github.com/blog/2012/10/10/artsy-technology-stack/"/>
    <updated>2012-10-10T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/10/artsy-technology-stack</id>
    <content type="html"><![CDATA[<p>The public launch of Art.sy via the <a href="http://www.nytimes.com/2012/10/09/arts/design/artsy-is-mapping-the-world-of-art-on-the-web.html">New York Times</a> is a good opportunity to describe our current technology stack.</p>

<p>What you see when you go to <a href="http://art.sy">art.sy</a> is a website built with <a href="http://backbonejs.org/">Backbone.js</a> and written in <a href="http://coffeescript.org/">CoffeeScript</a>. It renders JSON data from <a href="http://rubyonrails.org/">Ruby on Rails</a>, <a href="https://github.com/intridea/grape">Ruby Grape</a> and <a href="http://nodejs.org/">Node.js</a> services. Text search is powered by <a href="http://lucene.apache.org/solr/">Apache Solr</a>. We also have an <a href="https://developer.apple.com/devcenter/ios/index.action">iOS</a> application that talks to the same back-end Ruby API. We run all our web processes on <a href="http://www.heroku.com/">Heroku</a> and all job queues on <a href="http://aws.amazon.com/">Amazon EC2</a>. Our data store is <a href="http://www.mongodb.org/">MongoDB</a>, operated by <a href="https://mongohq.com/">MongoHQ</a> and we have some <a href="http://redis.io/">Redis</a> instances. Our assets, including images, are served from <a href="http://aws.amazon.com/s3/">Amazon S3</a> via the <a href="http://aws.amazon.com/cloudfront/">CloudFront CDN</a>. We heavily rely on <a href="http://memcached.org/">Memcached</a> Heroku addon and we use <a href="http://sendgrid.com/">SendGrid</a> and <a href="http://mailchimp.com/">MailChimp</a> to send e-mail. Systems are monitored by a combination of <a href="http://newrelic.com/">New Relic</a> and <a href="https://www.pingdom.com/">Pingdom</a>. All of this is built, tested and deployed with <a href="http://jenkins-ci.org/">Jenkins</a>.</p>

<p><img src="http://artsy.github.com/images/2012-10-10-artsy-technology-stack/artsy-infrastructure.png"></p>

<p>In this post I&#8217;ll go in depth in our current system architecture and tell you the story about how these parts all came together.</p>

<!-- more -->


<h2>Early Prototypes</h2>

<p>Art.sy early prototypes in 2010 consisted of a combination of PHP and Java web services running on JBoss and backed by a MySQL database. The system had more similarities with a large transactional banking application than a consumer website.</p>

<p>In early 2011 we rebooted the project on Ruby on Rails. RDBMS storage was replaced with NoSQL MongoDB. A <a href="http://www.10gen.com/presentations/MongoNYC-2012/Using-MongoDB-to-Build-Artsy">video</a> was recorded at MongoNYC 2012 that goes in depth into this specific choice.</p>

<h2>Art.sy Architecture Today</h2>

<p>Having only a handful of engineers, our goal has always been to keep the number of moving parts to an absolute minimum. With a few new engineers we were able to expand things a bit.</p>

<h2>Art.sy Website Front-End</h2>

<p>The Art.sy website is a responsive <a href="http://backbonejs.org/">Backbone.js</a> application written in <a href="http://coffeescript.org/">CoffeeScript</a> and <a href="http://sass-lang.com/">SASS</a> and served from a Rails back-end. The generated JavaScript and CSS files are packaged and compressed with <a href="http://documentcloud.github.com/jammit/">Jammit</a> and deployed to Amazon S3. The Rails app itself is a traditional MVC system that bootstraps application data and mostly serves SEO needs, such as meta tags, escaped fragments and page titles. Once the basic data has been rendered though, Backbone routing takes over and you&#8217;re now navigating a client-side browser app with pushState support as available, swapping frames and rendering views using JST templates and JSON data returned from the API.</p>

<h2>Core API</h2>

<p>The website talks to the nervous system of Art.sy, a RESTful API built in Ruby and <a href="https://github.com/intridea/grape">Grape</a>. While it&#8217;s not currently available for 3rd party applications for various image rights-related reasons, you can play with it <a href="http://art.sy/api/v1/explorer">here</a>.</p>

<p>In the early days we did a ton of domain-driven design and spent a lot of time modeling concepts such as <em>artist</em> or <em>artwork</em>. The API has read and write behavior for all our domain concepts. Probably 70% of it is pure CRUD doing <a href="http://mongoid.org/">Mongoid</a> queries with a layer of access control in <a href="https://github.com/ryanb/cancan">CanCan</a> and cache partitioning and binding using <a href="http://confreaks.com/videos/986-goruco2012-from-zero-to-api-cache-w-grape-mongodb-in-10-minutes">Garner</a>.</p>

<h2>Search Autocomplete</h2>

<p>The first iteration of the website&#8217;s text search was powered by <a href="https://github.com/artsy/mongoid_fulltext">mongoid_fulltext</a>. Today we run an <a href="http://lucene.apache.org/solr/">Apache Solr</a> master-slave environment hosted on EC2.</p>

<h2>Offline Indexes</h2>

<p>The indexes that serve complex queries like related artists/artworks and filtered searches of artworks are all built offline. Our index-building system runs continuously, repeatedly pulling data from our production system to build the most out-of-date index. All of the most current indexes are imported back into production by a daily batch process and we swap the old indexes out atomically using <a href="https://github.com/aaw/mongoid_collection_snapshot">mongoid_collection_snapshot</a>.</p>

<p>One of such indexes a <em>similarity graph</em> that we query to produce most similar results on the website, other indexes serve filtering needs, etc. We run these processes nightly.</p>

<h2>Admin Back-End and Partner CMS</h2>

<p>The Art.sy CMS and the Admin system are two newer projects and serve the needs of our partners and our internal back-end needs, respectively. These are built on a thin <a href="http://nodejs.org">Node.js</a> server that proxies requests to our API using <a href="https://github.com/nodejitsu/node-http-proxy">node-http-proxy</a>. They consist of a client-side Backbone.js application with assets packaged with <a href="https://github.com/craigspaeth/nap">nap</a>. This is a lot like our website, but completely decoupled from the main Rails application and sharing the same technology for both client and server with CoffeeScript and <a href="http://jade-lang.com/">Jade</a>.</p>

<h2>Folio Partner App</h2>

<p>Art.sy makes a free iOS application, called <a href="http://artsy.github.com/blog/categories/ios/">Folio</a>, which lets our partners display their inventory at art fairs.</p>

<p>Folio is a native iOS implementation. The interface is heavily skinned UIKit with CoreData for storage. Our network code was originally a thin layer on top of NSURLConnection, but for our forthcoming update, we’ve rewritten it to use <a href="https://github.com/AFNetworking/AFNetworking/">AFNetworking</a>. We manage external dependencies with <a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>.</p>

<h2>Want More Specifics? Have Questions?</h2>

<p>We hope you find this useful and are happy to describe any aspect of our system on this blog. Please ask questions below, we’ll be happy to answer them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run RSpec Test Suites in Parallel with JenkinsCI Build Flow]]></title>
    <link href="http://artsy.github.com/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/"/>
    <updated>2012-10-09T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow</id>
    <content type="html"><![CDATA[<p>We now have over 4700 RSpec examples in one of our projects. They are stable, using the techniques described in an <a href="http://artsy.github.com/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/">earlier post</a> and organized in <a href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">suites</a>. But they now take almost 3 hours to run, which is clearly unacceptable.</p>

<p>To solve this, we have parallelized parts of the process with existing tools, and can turn a build around in just under an hour. This post will dive into our <a href="http://jenkins-ci.org/">Jenkins</a> build flow setup.</p>

<p>To keep things simple, we&#8217;re going to only build the <code>master</code> branch. When a change is committed on <code>master</code> we&#8217;re going to push <code>master</code> to a <code>master-ci</code> branch and trigger a distributed build on <code>master-ci</code>. Once all the parts have finished, we&#8217;ll complete the build by pushing <code>master-ci</code> to <code>master-succeeded</code> and notify the dev team of success or failure.</p>

<p>Here&#8217;s a diagram of what&#8217;s going on.</p>

<p><img src="http://artsy.github.com/images/2012-10-09-how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/master-ci.png"></p>

<!-- more -->


<h2>Plugins</h2>

<p>Install the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin">Build Flow</a> and the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin">Parameterized Trigger</a> plugin. Grant <code>Anonymous</code> job read permissions in Jenkins system configuration (see <a href="https://issues.jenkins-ci.org/browse/JENKINS-14027">JENKINS-14027</a>).</p>

<p>Create the following Jenkins jobs.</p>

<h2>master-prequel</h2>

<p>A free-style job that connects to the SCM, in our case Git.</p>

<ul>
<li>Set SCM repository URL to your Git repo, eg. <code>git@github.com:spline/reticulator.git</code></li>
<li>Change the default branch specifier from <code>**</code> to <code>master</code>. We&#8217;ll be pushing a <code>master-ci</code> branch, which could, in turn, cause more builds if you don&#8217;t do this.</li>
<li>Add a post-build action to build another project. Trigger the <code>master</code> project if the build succeeds.</li>
</ul>


<h2>master</h2>

<p>This is a build-flow job. We&#8217;ll describe the individual tasks that the flow invokes further. The flow DSL looks as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-init&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">parallel</span> <span class="p">(</span>
</span><span class='line'> <span class="p">{</span> <span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-task&quot;</span><span class="p">,</span> <span class="n">tasks</span><span class="p">:</span> <span class="s2">&quot;spec:suite:models:ci&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'> <span class="p">{</span> <span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-task&quot;</span><span class="p">,</span> <span class="n">tasks</span><span class="p">:</span> <span class="s2">&quot;spec:suite:api:ci&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'> <span class="p">{</span> <span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-task&quot;</span><span class="p">,</span> <span class="n">tasks</span><span class="p">:</span> <span class="s2">&quot;spec:suite:integration:ci&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-succeeded&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a good place to add an e-mail notification post-build action for every unstable build.</p>

<h2>master-ci-init</h2>

<p>A free-style job that creates the <code>master-ci</code> branch from master. It needs to be connected to your SCM and executes the following shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>git checkout <span class="nv">$GIT_BRANCH</span>
</span><span class='line'>git push origin -f <span class="nv">$GIT_BRANCH</span>:<span class="nv">$GIT_BRANCH</span><span class="se">\-</span>ci
</span></code></pre></td></tr></table></div></figure>


<p>Note that we cannot combine this task with <code>master-prequel</code>, because we have to make sure the branch creation runs once under the entire flow, while <code>master-prequel</code> can be run multiple times, once per check-in. Otherwise the <code>master-ci</code> branch could get updated before a <code>master-ci-task</code> runs from a previous flow execution.</p>

<h2>master-ci-task</h2>

<p>A parameterized build that accepts a <code>tasks</code> parameter that the flow will pass in.</p>

<p>Change the default branch specifier to <code>master-ci</code> and execute the following shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>bundle install
</span><span class='line'>bundle <span class="nb">exec </span>rake <span class="nv">$tasks</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example runs <code>rake $tasks</code>, which we define to be various test suites in our flow DSL. Our test suite setup is described in <a href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">this post</a>. Your mileage may vary.</p>

<h2>master-ci-succeeded</h2>

<p>This is an optional step. We use this free-style job to tag <code>master-ci</code> as <code>master-succeeded</code> with the following shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>git checkout <span class="nv">$GIT_BRANCH</span>
</span><span class='line'>git push origin -f <span class="nv">$GIT_BRANCH</span>:<span class="k">${</span><span class="nv">GIT_BRANCH</span><span class="p">/%-ci/</span><span class="k">}</span>-succeeded
</span></code></pre></td></tr></table></div></figure>


<p>Our deployment to production will pickup the <code>master-succeeded</code> branch when it&#8217;s time.</p>

<h2>Improvements?</h2>

<p>I see a few possible improvements here that might require a bit of work.</p>

<ul>
<li>The ability to split an RSpec suite up across an arbitrary number N sub-jobs and M executors would create an optimal parallel split based on the resources available.</li>
<li>Passing the value of <code>GIT_BRANCH</code> and <code>GIT_COMMIT</code> across these jobs would enable building any branch and eliminate the need for <code>master-ci-init</code>.</li>
<li>Build flow could support SCM polling the same way as free-style jobs, avoiding the need for <code>master-prequel</code>. We weren&#8217;t able to get a stable notification of changes from Github with the Jenkins Github plugin.</li>
</ul>


<p>Please suggest further improvements in the comments below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Grid Thumbnails]]></title>
    <link href="http://artsy.github.com/blog/2012/09/13/on-grid-thumbnails/"/>
    <updated>2012-09-13T16:40:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/09/13/on-grid-thumbnails</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.com/images/2012-09-13-on-grid-thumbnails/grid.jpg"></p>

<p>Artsy Folio, our free iPad app for Gallery Partners, had been in the App Store for a couple of weeks before the iPad with a Retina display was announced. This had been something we expected internally and felt the application would be ready. We had all our image assets available in <em>@2x</em> versions and an image pipeline that would take scaling into account. With that in mind, we changed our artwork grid view to show a double resolution image. Finally, once we were happy that it worked fine on the simulator, we sent the build off to Apple for review.</p>

<p>The app passed review, and was Retina-ready before the actual release. But within hours of getting our hands on a real Retina iPad, we had to pull the app. This post will explain why, and what we did to work it out.</p>

<!--more-->


<p>Scrolling the grid view was slow. Extremely slow. The reason why wasn&#8217;t obvious initially, but thanks to digging around using <a href="http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html">Instruments</a>, we saw that a great deal of time was spent in Apple&#8217;s image processing libraries. This was a strong hint that the problem involved taking the file and getting it to the screen.</p>

<p>In our naiveté, Folio was originally using <code>UIImage</code>&#8217;s <code>initWithContentsOfFile:</code> to load (without caching) a jpg from the file system. Once the file was loaded into memory, we displayed it onscreen in an <code>UIImageView.</code> This was fast enough to deal with our small thumbnails of <em>240x240</em> but the moment that you start asking it to pull 3 or 4 <em>480x480</em> jpg files off the filesystem, decompress them and then put them on the screen, you&#8217;re not going to have a smooth scroll.</p>

<p><img src="http://artsy.github.com/images/2012-09-13-on-grid-thumbnails/thumbnails.jpg"></p>

<p>As we knew that we were looking at an issue with getting images from a file, it made sense to start looking at ways to move image processing off the main thread. This Stack Overflow thread on <a href="http://stackoverflow.com/questions/1815476/cgimage-uiimage-lazily-loading-on-ui-thread-causes-stutter">UIImage lazy loading</a> proved to be an essential start to dealing with our issue. We needed a thread-safe way to get the contents of a file and to pass them through once the images had been decoded. What we needed was <a href="https://gist.github.com/3715588">initImmediateLoadWithContentsOfFile</a>, a thread-safe way to go from a filepath to a <code>UIImage</code>.</p>

<p>Now that we had a way to get an image that was safe to go on a background thread, we gave our grid an <code>NSOperationQueue</code> and created a method to kick off a <code>NSInvocationOperation</code> with our the cell we&#8217;re looking at and the address it needs to load the thumbnail.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setImageAsyncAtPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">imageAddress</span> <span class="nl">forGridCell:</span><span class="p">(</span><span class="n">ARImageGridViewCell</span> <span class="o">*</span><span class="p">)</span><span class="n">cell</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">operationOptions</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;address&quot;</span><span class="o">:</span> <span class="n">imageAddress</span><span class="p">,</span> <span class="s">@&quot;cell&quot;</span><span class="o">:</span> <span class="n">cell</span><span class="p">};</span>
</span><span class='line'>    <span class="n">NSInvocationOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSInvocationOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">asyncLoadImage:</span><span class="p">)</span> <span class="nl">object:</span><span class="n">operationOptions</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_operationQueue</span> <span class="nl">addOperation:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we had the simplest implementation of <code>asyncLoadImage</code> we found that scrolling would sometimes result in grid cells displaying the wrong image. It turned out that in the time it took to decode the jpg,  the cell had already been reused for a different artwork. This one totally caught us off guard!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">asyncLoadImage:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">options</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">address</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="s">@&quot;address&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">ARImageGridViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="s">@&quot;cell&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// don&#39;t load if it&#39;s on a different cell</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">cell</span><span class="p">.</span><span class="n">imagePath</span> <span class="nl">isEqualToString:</span><span class="n">address</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UIImage</span> <span class="o">*</span><span class="n">thumbnail</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initImmediateLoadWithContentsOfFile:</span><span class="n">address</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// double check that during the decoding the cell&#39;s not been re-used</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">cell</span><span class="p">.</span><span class="n">imagePath</span> <span class="nl">isEqualToString:</span><span class="n">address</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">thumbnail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">cell</span> <span class="nl">performSelectorOnMainThread:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setImage:</span><span class="p">)</span> <span class="nl">withObject:</span><span class="n">thumbnail</span> <span class="nl">waitUntilDone:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This meant we could have our UI thread dealing with scrolling, whilst <a href="https://developer.apple.com/technologies/mac/core.html">Grand Central Dispatch</a> would deal with ensuring the image processing was done asynchronously and as fast as possible.However, this still wasn&#8217;t enough. We were finding if you scrolled fast enough, you could still see images pop in after the grid cell was visible. For this, we actually went back to the beginning, and made our image pipeline create a <em>120x120</em> thumbnail for each artwork that we use <code>initImmediateLoadWithContentsOfFile</code> to load on the UI thread. This is fast enough to smoothly scroll, and is replaced by the higher resolution image practically instantly.</p>

<p><img src="http://artsy.github.com/images/2012-09-13-on-grid-thumbnails/hover-thumbnails.jpg"></p>

<p>The rest of the story is pretty straightforward. We wrapped all this up within a few days and got out a version of Folio for the Retina iPad, I ended up doing a talk about the issues involved in doing this in <a href="http://lsx.co/lsxcafe/">Leeds LSxCafé</a>, and you got a blog post out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Art.sy Builds Labs, Experiments and Easter Eggs]]></title>
    <link href="http://artsy.github.com/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs/"/>
    <updated>2012-09-12T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs</id>
    <content type="html"><![CDATA[<p>At Art.sy Engineering we encourage a culture of experimentation with something called <em>labs</em>.</p>

<p>A new feature released into production is usually only turned on for a handful of users. We get feedback from our own team and a tiny group of early adopters, iterate, fix bugs, toss failed experiments and work on promoting complete, well behaved features to all users. The labs infrastructure gives us a chance to sleep on an idea and polish details. It also allows us to make progress continuously and flip a switch on the very last day.</p>

<p>My favorite labs features push our collective imagination and give birth to productive brainstorms around coffee at a popular startup hangout around the corner from our Manhattan office. But the team&#8217;s favorite labs are, by far, those that ship as easter eggs. These are fun and sometimes useful features that don&#8217;t make much business sense. So, before I explain our rudimentary labs system, I want to invite you to our easter egg hunt. Check out <a href="http://art.sy/humans.txt">http://art.sy/humans.txt</a> for instructions.</p>

<!-- more -->


<p>Our labs infrastructure is rather straightforward. A lab feature data model is pretty boring, with the exception of a <code>created_by</code> field. Each such lab feature belongs to an engineer and you have to nurture your feature and fight for it to meet the production bar!</p>

<figure class='code'><figcaption><span>app/models/lab_feature.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LabFeature</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Timestamps</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:created_by</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can enable and disable a lab feature for a given user.</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="n">references_and_referenced_in_many</span> <span class="ss">:lab_features</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enable_lab_feature!</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lab_features</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span> <span class="k">unless</span> <span class="n">lab_features</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">disable_lab_feature!</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lab_features</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">lab_feature_enabled?</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lab_features</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Ruby, we check whether the user has a lab with <code>lab_feature_enabled?</code>. In JavaScript, we return the lab features in a Backbone.js collection and check for the same.</p>

<figure class='code'><figcaption><span>app/coffeescripts/models/user.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">CurrentUser</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">hasLabFeature: </span><span class="nf">(feature_name) -&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">feature_name</span><span class="p">,</span> <span class="nx">@get</span><span class="p">(</span><span class="s1">&#39;lab_features&#39;</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also have a bit of UI and an API to let you turn a lab feature on and off when you&#8217;re part of our labs program. The program itself is also a lab feature!</p>

<p>Lab features can be retired after the code is promoted to all users or deleted.</p>

<figure class='code'><figcaption><span>app/models/lab_feature.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LabFeature</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">retire!</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span>
</span><span class='line'>      <span class="n">u</span><span class="o">.</span><span class="n">disable_lab_feature!</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">destroy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This &#8220;system&#8221; is super simple. I encourage you to think more in terms of experiments or labs - it helped us foster a culture of innovation, tremendously reduced risk of catastrophic failures, and, because anyone can push anything into labs at any time, removed the unnecessary discussions around whether an idea is worthy of an implementation at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing with Delayed Jobs]]></title>
    <link href="http://artsy.github.com/blog/2012/08/16/testing-with-delayed-jobs/"/>
    <updated>2012-08-16T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/08/16/testing-with-delayed-jobs</id>
    <content type="html"><![CDATA[<p>A mean bug made it into our production environment. It wasn&#8217;t caught by our extensive test suite and caused thousands of emails to be sent to a handful of people. The root cause was an unfortunate combination of <a href="https://github.com/plataformatec/devise">Devise</a>, <a href="https://github.com/collectiveidea/delayed_job">DelayedJob</a> and, of course, our own code. It was an easy fix, but nobody ever wants this to happen again.</p>

<p>tl;dr DelayedJob says it&#8217;s possible to set <code>Delayed::Worker.delay_jobs = false</code> for your tests. Don&#8217;t do it.</p>

<!-- more -->


<p>Consider the following <code>User</code> model that implements various Devise strategies which support some kind of notification.</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:notified_at</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="no">DateTime</span>
</span><span class='line'>  <span class="n">after_save</span> <span class="ss">:notify!</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:notify?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify!</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="n">update_attributes!</span><span class="p">({</span> <span class="n">notified_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are overriding a black box <code>notify!</code> method and updating an attribute with a timestamp of the last notification.</p>

<p>Let&#8217;s write a test.</p>

<figure class='code'><figcaption><span>spec/models/user_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;notification&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;sends one email&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="n">notify!</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">deliveries</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;updates notified_at&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="n">notify!</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="ss">:notified_at</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All green. But once this code hit production, <code>notify!</code> was called in an infinite loop. How is that possible?</p>

<p>The call to <code>notify!</code> is delayed using DelayedJob in production and is not delayed in test. It does not work under DelayedJob and will create as many delayed notifications as it possibly can until it runs out of stack space.</p>

<p>As a common pattern in Devise, the implementation of <code>notify!</code> relies on an instance variable to signal that a notification has been sent. Setting the instance variable avoids sending the notification twice for multiple calls to <code>save!</code>. Our <code>after_save</code> callback invokes <code>update_attributes!</code>, which causes another <code>notify!</code> call unless <code>notify?</code> returns <code>false</code>. In a test, the call to <code>super</code> inside <code>notify!</code> will execute the notification (setting the instance variable), but will create a delayed job in production (without setting it).</p>

<p>We&#8217;ll start by bringing our tests closer to a real production environment by leaving <code>Delayed::Worker.delay_jobs = true</code> and making sure our problem is reproduced with a spec. We could call <code>Delayed::Worker.new.work_off</code> for every test that needs to execute a delayed job, but that would be rather tedious. A better approach may be to register an observer that will execute a delayed job every time one is created. This is similar to a production environment where having enough delayed workers almost guarantees a job is picked up immediately after being scheduled.</p>

<figure class='code'><figcaption><span>config/initializers/delayed_job_observer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DelayedJobObserver</span> <span class="o">&lt;</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Observer</span>
</span><span class='line'>  <span class="n">observe</span> <span class="no">Delayed</span><span class="o">::</span><span class="no">Job</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:runs</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_create</span><span class="p">(</span><span class="n">delayed_job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delayed_job</span><span class="o">.</span><span class="n">invoke_job</span>
</span><span class='line'>    <span class="no">DelayedJobObserver</span><span class="o">.</span><span class="n">runs</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">DelayedJobObserver</span><span class="o">.</span><span class="n">runs</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code, which handles a few more cases, including enabling and disabling the observer, and counting successful runs and errors can be found in <a href="https://gist.github.com/3370052">this gist</a>. Please help us improve it.</p>

<p>We can now test our notification without compromising on the delayed nature of the job and add a test making sure we create a single delayed job from a call to <code>notify!</code>.</p>

<figure class='code'><figcaption><span>spec/models/user_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;notification&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;creates one delayed job&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="n">notify!</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">DelayedJobObserver</span><span class="p">,</span> <span class="ss">:runs</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test will also run for a long time before failing with a stack overflow error. Our fix was not to call <code>notify!</code> from an <code>after_save</code> callback.</p>

<p>We&#8217;ve suggested that immediate execution using an observer becomes a feature in DelayedJob in <a href="https://github.com/collectiveidea/delayed_job/issues/423">#423</a>. Please add your comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Our Objective-C Code Standards]]></title>
    <link href="http://artsy.github.com/blog/2012/08/14/on-objective-c-code-standards/"/>
    <updated>2012-08-14T14:23:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/08/14/on-objective-c-code-standards</id>
    <content type="html"><![CDATA[<p>With the release of Xcode 4.4 I&#8217;ve taken a look back at our existing code standards and tried to come up with something that is cleaner and more elegant. Here are a few of the ideas I&#8217;ve been using to modernize the codebase.</p>

<h3>Remove private method declarations and use class extensions to add ivars.</h3>

<p>First to get chopped by the deletion button are private method declarations. After Xcode 4.2 came out we took to using the class extension feature to add private method declarations at the top of implementation files. This was a nice way of keeping private methods out of the header files. Now that the compiler will check for pre-existing method signatures within the same object there&#8217;s no need to define their interfaces.</p>

<!--more-->


<p>Occasionally it&#8217;s necessary for subclass to know about private methods defined by its superclass, so we use a shared category to let them know what they respond to. Like Apple, we also quit using <code>@private</code> in header files.</p>

<p>Ivars now should go in class extensions, and be prefixed by an underscore. Apple advises that you don&#8217;t use method names with underscores but encourage underscored variable names. This also can free up method parameters from having ugly names such as anArtwork or aString.</p>

<h3>Use object literals when possible.</h3>

<p>Object literals are ways of adding syntacitcal sugar to the Objective-C language, they let you access keys and values easily on <code>NSDictionary</code>s and objects in <code>NSArray</code>s. There&#8217;s no reason to not be using them if you&#8217;re supporting iOS 4 and above. It&#8217;s simple a matter of <code>_artworks[2]</code> vs <code>[_artworks objectAtIndex:2]</code>.</p>

<h3>Dot syntax is OK for non-properties.</h3>

<p>OK so, I admit it. I whined when properties came out. It was back in 2007 and the Objective-C was ranked 40th in the world, it&#8217;s now ranked <a href="http://www.tiobe.com/index.php/paperinfo/tpci/Objective-C.html">3nd most popular programming language.</a> Within timeframe, my opinion on the subject of properties changed also.</p>

<p>Originally when properties came out they exclusively were given the right to use dot notation on objects. This makes sense as they were created to provide public access to ivars which normally you can only access internally using the dot notation. With Xcode 4.3, that also changed. Now, if a method doesn&#8217;t have any arguments it can be called using dot notation. I&#8217;m in favour of using this. For me a good rule of thumb has been if a method returns something, dot notation is OK. For example, <code>_artworksArray.count</code> is fine whilst <code>_parsingOperation.stop</code> isn&#8217;t.</p>

<h3>Keep external code out of your project.</h3>

<p>External, or vendored code should be kept out of the main body of your code. You can use CocoaPods to keep all that code in check and up-to-date. CocoaPods is a project that aims to be what bundler does for ruby projects, or npm for node. It will deal with your dependancies whilst you can concentrate on your own code. It will create a seperate Xcode project that handles all you dependancies leaving your project only as your own code.</p>

<h3>Use umbrella imports.</h3>

<p>To try and keep the amount of noise we have at the top of our implementation files we have started to reduce the number of <code>#import "ARModel.h"</code> lines we use. By creating a <code>Models.h</code> file and having that include all the models it means we can still have a look through the <code>#imports</code> at the top to get an idea of the connections between the objects as that will only show the important imports. These can optionally be moved into your precompiled header files.</p>

<h3>Keep your code clean.</h3>

<p>Whitespace can and does slowly accumulate at the line-endings of your code. You should make sure that the new preference for automatically trimming whitespace is turned on in the text editing section of Xcode&#8217;s preferences.</p>

<h3>IBOutlets should probably go in your class extensions.</h3>

<p>With modern versions of Xcode, it doesn&#8217;t matter that your IBOutlets are defined in places other than in headers. As Objective-C developers, we&#8217;ve come a long way from having to repeatedly drag a .h from Xcode to Interface Builder, so maybe it&#8217;s time to rethink the idea that our interface outlets should be publicly accessible. My opinion is that a controller&#8217;s views are for the most part a private affair and that if you want to expose their functionality you do it through custom methods in the controller. There are some downsides to this, in that  initially you have to change to the implementation file when using hybrid view when connecting them.</p>

<p>These decisions have come from internal discussions and from watching many WWDC sessions on the topic. We highly recommend watching the following <a href="https://developer.apple.com/wwdc/">WWDC sessions</a>.</p>

<p>  <a href="https://developer.apple.com/videos/wwdc/2011/">WWDC 2011</a>: 105 Polishing Your App, 112 Writing Easy To Change Code and 322 - Objective-C Advancements in Depth.</p>

<p>  <a href="https://developer.apple.com/videos/wwdc/2012/">WWDC 2012</a>: 405 Modern Objective-C and 413 Migrating to Modern Objective-C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On-Demand Jenkins Slaves with Amazon EC2]]></title>
    <link href="http://artsy.github.com/blog/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2/"/>
    <updated>2012-07-10T13:30:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2</id>
    <content type="html"><![CDATA[<p>The <a href="http://art.sy">Art.sy</a> team faithfully uses <a href="http://jenkins-ci.org">Jenkins</a> for continuous integration. <a href="http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/">As we&#8217;ve described before</a>, our Jenkins master and 8 slaves run on Linode. This arrangement has at least a few drawbacks:</p>

<ul>
<li>Our Linode servers are manually configured. They require frequent maintenance, and inconsistencies lead to surprising build failures.</li>
<li>The fixed set of slaves don&#8217;t match the pattern of our build jobs: jobs get backed up during the day, but servers are mostly unused overnight and on weekends.</li>
</ul>


<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin">Amazon EC2 Plugin</a> allowed us to replace those slaves with a totally scripted environment. Now, slaves are spun up in the cloud whenever build jobs need them.</p>

<!-- more -->


<p>To set up the build slave&#8217;s Amazon Machine Image (AMI), we started from an <a href="http://cloud-images.ubuntu.com/releases/oneiric/release/">official Ubuntu 11.10</a> (Oneiric Ocelot) AMI, ran initialization scripts to set up our build dependencies (MongoDB, Redis, ImageMagick, Firefox, RVM, NVM, etc.), packaged our modified instance into its own AMI, and then set up the EC2 Plugin to launch instances from this custom AMI.</p>

<p>Our AMI setup steps are captured entirely in a <a href="https://gist.github.com/3085368">GitHub gist</a>, but because our build requirements are specific to our applications and frameworks, most organizations will need to modify these scripts to their own use cases. Given that caveat, here&#8217;s how we went from base Ubuntu AMI to custom build slave AMI:</p>

<ol>
<li>We <a href="https://console.aws.amazon.com/ec2/home?region=us-east-1#launchAmi=ami-4dad7424">launched</a> an Ubuntu 11.10 AMI <code>4dad7424</code> via the AWS console.</li>
<li>Once the instance was launched, we logged in with the SSH key we generated during setup.</li>
<li><p>We ran the following commands to configure the instance:</p>

<pre><code> curl -L https://raw.github.com/gist/3085368/_base-setup.sh | sudo bash -s
 sudo su -l jenkins
 curl -L https://raw.github.com/gist/3085368/_jenkins-user-setup.sh | bash -s
</code></pre></li>
<li><p>From the &#8220;Instances&#8221; tab of the AWS Console, we chose the now-configured instance, and from the &#8220;Instance Actions&#8221; dropdown, selected &#8220;Stop&#8221;, followed by &#8220;Create Image (EBS AMI)&#8221;.</p></li>
</ol>


<p>Next we installed the Amazon EC2 Plugin on our Jenkins master, and entered the following configuration arguments for the plugin. (Replace the AMI ID with your own, the result of Step 4 above.)</p>

<p><img src="http://artsy.github.com/images/2012-07-10-on-demand-jenkins-slaves-with-amazon-ec2/ec2-plugin-config.png" title="[Jenkins EC2 Plugin configuration]" ></p>

<p>New build slaves began spawning immediately in response to job demand! Our new &#8220;Computers&#8221; page on Jenkins looks like this:</p>

<p><img src="http://artsy.github.com/images/2012-07-10-on-demand-jenkins-slaves-with-amazon-ec2/computer-list.png" title="[Jenkins computer list]" ></p>

<p>We have the option of provisioning a new build slave via a single click, but so far, this hasn&#8217;t been necessary, since slaves have automatically scaled up and down with demand. We average around 4-8 build slaves during the day, and 0-1 overnight and on weekends.</p>

<h2>Outcome and Next Steps</h2>

<p>This arrangement hasn&#8217;t been in place for long, but we&#8217;re excited about the benefits it&#8217;s already delivered:</p>

<ul>
<li>Builds now take a predictable amount of time, since slaves automatically scale up to match demand.</li>
<li>Slaves offer a more consistent and easily maintained configuration, so there are fewer spurious failures.</li>
<li>Despite higher costs on EC2, we hope to spend about the same (or maybe even less) now that we&#8217;ll need to operate only the master server during periods of inactivity (like nights and weekends).</li>
</ul>


<p>As proponents of <em>automating the hard stuff</em>, we get a real kick out of watching identical slaves spin up as builds trickle in each morning, then disappear as the queue quiets down in the evening. Still, there are a few improvements to be made:</p>

<ul>
<li>Our canonical slave&#8217;s configuration should be scripted with <a href="http://www.opscode.com/chef/">Chef</a>.</li>
<li>Sharp-eyed readers will notice that our Jenkins master is still a Linode server. It might benefit from the same type of scripted configuration as the slaves.</li>
<li>Cooler still would be for the EC2 plugin to take advantage of Amazon&#8217;s <a href="http://aws.amazon.com/ec2/spot-instances/">spot pricing</a>. Though not supported at the moment, it would allow us to spend a fraction as much (or spend the same amount, but on more powerful resources).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spend Time With Your Site]]></title>
    <link href="http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site/"/>
    <updated>2012-07-05T10:51:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site</id>
    <content type="html"><![CDATA[<p>Empathy with end users is critical when developing consumer-facing software. Many go <a href="http://innonate.com/2011/03/09/hackers-the-canon-of-consumer-facing-products/">even</a> <a href="http://www.uie.com/articles/self_design/">further</a> and argue that you should <em>be</em> your own user to effectively deliver the best experience.</p>

<blockquote><p><em>I&#8217;d encourage anyone starting a startup to become one of its users, however unnatural it seems.</em></p>

<p>&mdash; Paul Graham <a href="http://paulgraham.com/organic.html">Organic Startup Ideas</a></p></blockquote>

<p>In practice, though, this can be difficult:</p>

<ul>
<li>As a developer, you&#8217;re just not representative of the intended audience.</li>
<li>You&#8217;re [appropriately] focused on the product&#8217;s next iteration, while your audience is occupied with the current state.</li>
<li>You spend countless hours focused on product details&mdash;of course it&#8217;s a challenge to empathize with a casual visitor&#8217;s first impression.</li>
</ul>


<h2>Keeping it Real</h2>

<p>We&#8217;ve tried some best practices to overcome these tendencies. User feedback is emailed to everyone in the company. Engineers share customer support responsibilities. But one simple tool has been surprisingly useful: we stole a page from the agile development handbook and built an <a href="http://alistair.cockburn.us/Information+radiator">information radiator</a>. Like a <a href="http://en.wikipedia.org/wiki/Kanban_board">kanban board</a>, news ticker, or <a href="https://demo.geckoboard.com/dashboard/B6782E562794C2F2/">analytics wall board</a>, our information radiator gives us an ambient awareness of end users&#8217; experiences. How?</p>

<!-- more -->


<p><strong>It&#8217;s our site, as a slideshow.</strong></p>

<p><img class="screenshot" src="http://artsy.github.com/images/2012-07-05-spend-time-with-your-site/slideshow_screenshot.jpg" title="[Art.sy as a slideshow]" ></p>

<p>That&#8217;s all. Our wall-mounted display shows the same web page that a visitor to our site recently requested. Every 20 seconds, it refreshes and shows a new, more recently requested page.</p>

<p>Without much effort, this gives us a sense of where users spend time on the site (<em>nudes seem popular today</em>). The impact of events such as email blasts or celebrity mentions is immediately apparent (<em>did <a href="https://twitter.com/aplusk">@aplusk</a> just tweet us?</em>). And when problems happen, we notice them as soon as errors pop up on the screen (<em><a href="http://gigaom.com/cloud/some-of-amazon-web-services-are-down-again/">AWS down again?</a></em>).</p>

<p>Of course, this doesn&#8217;t replace proper user research, analytics, or monitoring. And the approach might need tweaking to work for your site. The lesson, though, is <em>find a way to spend time with your site</em>.</p>

<h2>Implementation Notes</h2>

<p>Using <a href="https://github.com/matschaffer/knife-solo">knife-solo</a> and <a href="http://www.opscode.com/chef/">chef</a>, we spawned an <a href="http://aws.amazon.com/ec2/">EC2</a> instance and configured it to <a href="https://devcenter.heroku.com/articles/logging#syslog_drains">drain our main site&#8217;s logs from heroku</a>. A single, static web page contains a full-screen iframe and a bit of javascript that periodically requests the most recent URL from a tiny <a href="http://www.sinatrarb.com/">sinatra</a> app, loading the resulting URL into the iframe. The sinatra app performs an ugly bash command to grep the last appropriate GET request from the drained log, filtering out requests from Art.sy HQ and other uninteresting cases. Via a special flag, our site suppresses the usual tracking and analytics when loaded in this context (you didn&#8217;t want to juice your stats, right?).</p>

<p>Have other tricks for keeping it real? Let us know in the comments.</p>

<p><em>Update:</em> See a gist with <a href="https://gist.github.com/3073907">sample code for the slideshow app</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing #! Routes with PushState Using Backbone.js]]></title>
    <link href="http://artsy.github.com/blog/2012/06/25/replacing-hashbang-routes-with-pushstate/"/>
    <updated>2012-06-25T11:35:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/06/25/replacing-hashbang-routes-with-pushstate</id>
    <content type="html"><![CDATA[<blockquote><p>The only constant is change, continuing change, inevitable change, that is the dominant factor in society
[and web apps!] today. No sensible decision can be made any longer without taking into account not only
the world as it is, but the world as it will be.</p>

<p>&ndash; Isaac Asimov</p></blockquote>

<h2>R.I.P #!</h2>

<p>It did not take us long to discover we shared the concerns of Twitter&#8217;s
<a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb on hashbang routes</a>,
but it was almost a year before we were able to remove them from art.sy. Here&#8217;s how it went down.</p>

<p>Art.sy relies on the <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> framework for our client application
which offers a solid pushState routing scheme. This includes a seamless hashtag fallback for
<a href="http://caniuse.com/#feat=history">browsers that don&#8217;t support the HTML5 History API</a> (looking at you IE 9).</p>

<p>The pushState routing is optional, but <em>&#8220;the world as it should be&#8221;</em> suggests we say &#8220;Yes!&#8221; (or true) to pushState.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span> <span class="nv">pushState: </span><span class="kc">true</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>The Client</h3>

<p>At Art.sy, we had left Backbone out of the loop for most of our internal linking. Our markup href attributes all
began with &#8216;/#!&#8217; and expected the browser&#8217;s default hash behavior to keep the page from refreshing. For a proper
pushState scheme, the app&#8217;s internal linking should begin with an absolute route. Backbone.js defaults to &#8216;/&#8217;, but
this is configurable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Optional root attribute defaults to &#39;/&#39;</span>
</span><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span>
</span><span class='line'>  <span class="nv">pushState: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nv">root: </span><span class="s2">&quot;/specialized/client/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Internal Links</h4>

<p>All internal links need to begin with your configured root (&#8216;/&#8217; for art.sy).
Be sure to leave out your domain (<del>http://art.sy</del>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/artwork/matthew-abbott-lobby-and-supercomputer&quot;</span><span class="nt">&gt;</span>My Favorite Work<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now needed a global link handler that will leverage Backbone&#8217;s <code>navigate</code> method which takes
care of updating the URL and avoiding a page refresh or alternatively wiring up the hashtag fallback.
Since we follow the convention of starting all <code>href</code> attributes with our application&#8217;s root, we
can match on that in our selector to get all anchors whose link begins with our root, <code>a[href^='/']</code>.
This link handler is a great place to ensure backward compatibility while #!s are removed from
internal links.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Globally capture clicks. If they are internal and not in the pass </span>
</span><span class='line'><span class="c1"># through list, route them through Backbone&#39;s navigate method.</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="kc">on</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;a[href^=&#39;/&#39;]&quot;</span><span class="p">,</span> <span class="nf">(event) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">href = </span><span class="nx">$</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># chain &#39;or&#39;s for other black list routes</span>
</span><span class='line'>  <span class="nv">passThrough = </span><span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;sign_out&#39;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Allow shift+click for new tabs, etc.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="nx">passThrough</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">altKey</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">ctrlKey</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">metaKey</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">shiftKey</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Remove leading slashes and hash bangs (backward compatablility)</span>
</span><span class='line'>    <span class="nv">url = </span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\//</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;\#\!\/&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Instruct Backbone to trigger routing events</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span> <span class="nx">url</span><span class="p">,</span> <span class="p">{</span> <span class="nv">trigger: </span><span class="kc">true</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thank you TenFarms for the excellent write up on <a href="http://dev.tenfarms.com/posts/proper-link-handling">proper link handling for pushState enabled browsers</a>.</p>

<h4>External Links</h4>

<p>The application will need a small check early in the initialization process to redirect external
links still expecting the #! routing scheme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Our Backbone App namespace</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">App =</span>
</span><span class='line'>  <span class="c1"># Namespace Backbone components</span>
</span><span class='line'>  <span class="nv">Models: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">Collections: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">Views: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">redirectHashBang: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nv">location = </span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># DOM is ready, are we routing a #!?</span>
</span><span class='line'><span class="nx">$</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">redirectHashBang</span><span class="p">()</span>
</span><span class='line'>  <span class="c1"># else... continue on with initialization</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Server</h3>

<p>Now that our app will receive requests to full URLs
&#8216;http://art.sy/artwork/mattew-abbott-lobby-and-supercomputer&#8217;
instead of &#8216;http://art.sy/#!/artwork/mattew-abbott-lobby-and-supercomputer&#8217;,
we need to update our Rails setup.</p>

<p>Below is an excerpt from our Rails application&#8217;s router.
Note references to our home and artworks controllers. Both use a <code>before</code> filter
to determine a user&#8217;s authentication state and serve a different layout, with
unique assets or Backbone applications.</p>

<p>Controllers related to specific models now have the opportunity to
bootstrap associated JSON or mark up and we now get expected 404 (file not found)
error behavior without extra work required by a hash routing scheme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Server - Rails</span>
</span><span class='line'><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;home#index&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Controller logic determines the layout and could bootstrap data</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:artworks</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="s2">&quot;artwork&quot;</span><span class="p">,</span> <span class="n">only</span><span class="p">:</span> <span class="ss">:show</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Plural to singular redirect - mistakes happen!</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/artworks/:id&quot;</span> <span class="o">=&gt;</span> <span class="n">redirect</span><span class="p">(</span><span class="s1">&#39;/artwork/%{id}&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># No match? Rails handles routing the 404 error.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An added bonus here is a near one to one mapping with the Rails and client routes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Backbone.js - Client</span>
</span><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Routers</span><span class="p">.</span><span class="nx">Client</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">routes:</span>
</span><span class='line'>    <span class="s1">&#39;&#39;</span>            <span class="o">:</span> <span class="s1">&#39;home&#39;</span>
</span><span class='line'>    <span class="s1">&#39;artwork/:id&#39;</span> <span class="o">:</span> <span class="s1">&#39;artwork&#39;</span>
</span><span class='line'>    <span class="s1">&#39;artworks/:id&#39;</span><span class="o">:</span> <span class="s1">&#39;redirectToArtwork&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>URLs R 4 Ever</h2>

<p>Dan Webb&#8217;s assertion that <a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">URLs are forever</a> is correct,
but so is Isaac Asimov&#8217;s statement on change. You can&#8217;t predict the future.
You make decisions based on the best data you have at the time. We started our app with hashtag routing
in early 2011 and added the ! around five months later (about the same time Dan Webb wrote his post).
Had we started Art.sy today, even six months ago, I&#8217;m confident we would have enabled Backbone&#8217;s pushState routing.
There&#8217;s no need to look back. The future is here and its URLs are #! free!</p>

<h3>Footnotes</h3>

<ul>
<li><a href="http://documentcloud.github.com/backbone">Backbone.js</a></li>
<li><a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Google offers #! to aid the crawlability of AJAX hash routed applications</a></li>
<li><a href="http://caniuse.com/#feat=history">Browser support for the HTML5 History API (aka pushState)</a></li>
<li><a href="http://www.adequatelygood.com/2011/2/Thoughts-on-the-Hashbang">Twitter advocates #!</a></li>
<li><a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb&#8217;s critique <em>It&#8217;s About the Hashbangs</em></a></li>
<li><a href="http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html">Twitter ditches #!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful API Caching with Garner]]></title>
    <link href="http://artsy.github.com/blog/2012/05/30/restful-api-caching-with-garner/"/>
    <updated>2012-05-30T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/30/restful-api-caching-with-garner</id>
    <content type="html"><![CDATA[<p>Implementing server-side RESTful API caching is hard. In a straightforward API all the expiry decisions can be made automatically based on the URL, but most real world APIs that add requirements around object relationships or user authorization make caching particularly challenging.</p>

<p>At <a href="http://goruco.com/">GoRuCo</a> we open-sourced <a href="http://github.com/artsy/garner">Garner</a>, a cache implementation of the concepts described in this post. To &#8220;garner&#8221; means to gather data from various sources and to make it readily available in one place, kind-of like a cache! Garner works today with the <a href="http://github.com/intridea/grape">Grape API framework</a> and the <a href="http://github.com/mongoid/mongoid">Mongoid ODM</a>. We encourage you to fork the project, extend our library to other systems and contribute your code back, if you find it useful.</p>

<p>Garner implements the Art.sy API caching cookbook that has been tried by fire in production.</p>

<!-- more -->


<h3>Enabling Caching of Static Data</h3>

<p>Caching static data is fairly easy: set <code>Cache-Control</code> and <code>Expires</code> headers in the HTTP response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expire_in</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">365</span>
</span><span class='line'><span class="n">header</span> <span class="s2">&quot;Cache-Control&quot;</span><span class="p">,</span> <span class="s2">&quot;private, max-age=</span><span class="si">#{</span><span class="n">expire_in</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">header</span> <span class="s2">&quot;Expires&quot;</span><span class="p">,</span> <span class="no">CGI</span><span class="o">.</span><span class="n">rfc1123_date</span><span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span> <span class="o">+</span> <span class="n">expire_in</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example indicates to a cache in front of your service (CDN, proxy or user&#8217;s browser) that the data expires in a year and that it&#8217;s private for this user. When caching truly static data, such as images, use <code>public</code>. Your CDN or proxy, such as <a href="https://www.varnish-cache.org/">Varnish</a> that sits in front of Art.sy on <a href="http://www.heroku.com/">Heroku</a>, will cache the data and subsequent requests won&#8217;t even need to hit your server, even though it could potentially serve different content every time.</p>

<h3>Disabling Caching of Dynamic Data</h3>

<p>Caching dynamic data is slightly more involved. Let&#8217;s begin with a simple Ruby API that returns a counter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">API</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">count</span>
</span><span class='line'>    <span class="p">{</span> <span class="n">count</span> <span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of dynamic data cannot have a well-defined expiration time. The counter may be incremented at any time via another API call or process, so we must tell the client not to cache it. This is accomplished by setting the value of <code>Cache-Control</code> to <code>private, max-age=0, must-revalidate</code>. The <code>private</code> option instructs the client that it&#8217;s allowed to store data in a private cache (unnecessary, but is known to work around overzealous cache implementations), <code>max-age</code> that it must check with the server every time it needs this data and <code>must-revalidate</code> prevents gateways from returning a response if your API server is unreachable. An additional <code>Expires</code> header set to a past date (usually January 1st 1990), will make double-sure the entire request expires immediately with old browsers.</p>

<p>Garner provides <a href="https://github.com/dblock/garner/blob/master/lib/garner/middleware/cache/bust.rb">Garner::Middleware::Cache::Bust</a> a Rack middleware that accomplishes just that.</p>

<h3>If-Modified-Since, ETags and If-None-Match</h3>

<p>Given our API example, a client may want to retrieve the value of the counter and, for example, run a job every time the value changes. As it stands, the current API requires an effort on the client&#8217;s part to remember the previous value and compare it every time it makes an API call. This can be avoided by asking the server for a new counter if the value has changed since last time it was retrieved.</p>

<p>One option for the client is to include an <code>If-Modified-Since</code> header with a timestamp. The server could then choose to respond with <code>304 Not Modified</code> if the counter hasn&#8217;t changed since the timestamp in <code>If-Modified-Since</code>. While this may be acceptable for certain data, timestamps have a granularity of seconds. A counter may be modified multiple times during the same second, therefore preventing it from retrieving the result of the second modification.</p>

<p>A more robust solution is to generate a unique signature, called ETag, for this data and to use it to find out whether the counter has changed. There exists a generic <a href="https://github.com/rack/rack/blob/master/lib/rack/etag.rb">Rack::ETag</a> middleware that sets ETags on all text bodies. Adding the middleware would produce an ETag for every response from the API. You can now combine <code>Rack::ETag</code> and <code>Rack::Cache</code> - a client makes a request with an <code>If-None-Match: Etag</code> header and the server returns a <code>304 Not Modified</code> if the data hasn&#8217;t changed, without sending the data.</p>

<h3>Memcached via Dalli and Rails.Cache</h3>

<p>There&#8217;s an obvious problem with <code>Rack::Cache</code>. In order for it to serve a <code>304 Not Modified</code> response it must compare the ETag from the request with the ETag generated from the body of the current response. So it saves bandwidth, but doesn&#8217;t save execution time on the server. We&#8217;d also like the server to cache the entire response and therefore avoid any heavy processing, such as querying a database.</p>

<p>A typical Ruby cache supports a block syntax. The following example returns a cached copy when available or executes the supplied block and stores the result in the cache. In this context <code>cache</code> could be <code>Rails.cache</code> or an instance of <code>ActiveSupport::Cache::FileStore</code>. We use <code>Rails.cache</code> with <a href="http://memcached.org/">Memcached</a> via the <a href="https://github.com/mperham/dalli">dalli gem</a> in production.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cache</span><span class="p">(</span><span class="s2">&quot;count&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">count</span> <span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The parameter of the <code>cache</code> call is the cache key that uniquely identifies the cache entry. Hard-coding cache keys is tedious, so we can generate a key from the API version, route and request parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">cache_key</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:version</span><span class="o">]</span> <span class="o">=</span> <span class="n">version</span>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:path</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:params</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span>
</span><span class='line'>  <span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generic approach to key generation is fine to get one started, but is largely insufficient for real-world applications.</p>

<h3>Production-Grade Cache Keys and Model Binding</h3>

<p>Most large scale web properties operate on data with the following requirements.</p>

<ul>
<li>Partition cache in sync with object ownership and permissions. For example, a <code>Widget</code> may have different representations depending on whether <code>current_user</code> owns it or not or may choose to return a <code>401 Access Denied</code> in some of the cases.</li>
<li>Retrieve objects from cache no matter where the calling code appears. The above strategy would generate identical keys from two different locations within the same function.</li>
<li>Invalidate entire cached collections when one of the objects in a collection has changed. For example, invalidate all cached instances of <code>Widget</code> when a new <code>WidgetCategory</code> is created and forces a reorganization of those widgets.</li>
</ul>


<p>Garner will help you introduce such aspects of your domain model into the cache and solve all these.</p>

<p>A cache is a collection of flat name/value pairs. We&#8217;ll specify object relationships within each key by chaining model names, field values and by using wildcards where appropriate. For example, <code>User/id=12,Widget/id=45,Gadget/*</code> binds the cache value to changes in <code>User</code> with id=12, <code>Widget</code> with id=45 and any instance of <code>Gadget</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cache</span><span class="p">(</span><span class="n">bind</span><span class="p">:</span> <span class="o">[[</span><span class="no">User</span><span class="p">,</span> <span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="no">Widget</span><span class="p">,</span> <span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:widget_id</span><span class="o">]</span> <span class="p">}</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="no">Gadget</span><span class="o">]</span> <span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Widget</span><span class="o">.</span><span class="n">where</span><span class="p">({</span> <span class="nb">id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:widget_id</span><span class="o">]</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="p">})</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">as_json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Binding to multiple objects or classes can also be reasoned about as a way to partition the cache. Adding structure into the fields lets us reason about the relationships between various instances of data in the cache.</p>

<h3>Role-Based Caching</h3>

<p>Role-Based caching is a subset of the generic problem of binding data to groups of other objects. For example, a <code>Widget</code> may have a different representation for an <code>admin</code> vs. a <code>user</code>. In Garner you can inject something called a &#8220;key strategy&#8221; into the current key generation pipeline. A strategy is a plain module that must implement two methods: <code>field</code> and <code>apply</code>. The former should define a unique key name and the latter applies the strategy within a context.</p>

<p>The following example introduces the role of the current user into the cache key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyApp</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Garner</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">RoleStrategy</span>
</span><span class='line'>      <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">field</span>
</span><span class='line'>          <span class="ss">:role</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">context</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>          <span class="n">key</span><span class="o">.</span><span class="n">merge</span> <span class="p">{</span> <span class="ss">:role</span> <span class="o">=&gt;</span> <span class="n">current_user</span><span class="o">.</span><span class="n">role</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Garner key strategies can be currently set at application startup time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Garner</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">ObjectIdentity</span><span class="o">::</span><span class="no">KEY_STRATEGIES</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="no">Garner</span><span class="o">::</span><span class="no">Strategies</span><span class="o">::</span><span class="no">Keys</span><span class="o">::</span><span class="no">Caller</span><span class="p">,</span> <span class="c1"># support multiple calls from the same function</span>
</span><span class='line'>  <span class="no">MyApp</span><span class="o">::</span><span class="no">Garner</span><span class="o">::</span><span class="no">RoleStrategy</span><span class="p">,</span> <span class="c1"># custom strategy for role-based access</span>
</span><span class='line'>  <span class="no">Garner</span><span class="o">::</span><span class="no">Strategies</span><span class="o">::</span><span class="no">Keys</span><span class="o">::</span><span class="no">RequestPath</span> <span class="c1"># injects the HTTP request&#39;s URL</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Multiple Calls from the Same Function</h3>

<p>Binding to the same set of objects within the same function call will produce the same key. To solve this in a generic way we can examine the call stack, find the caller that&#8217;s not within the helper module and inject it in the key options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">api_caller</span> <span class="o">=</span> <span class="nb">caller</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="o">!</span><span class="p">(</span><span class="n">line</span> <span class="o">=~</span> <span class="sr">/\/</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="si">}</span><span class="sr">/</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">api_caller_line</span> <span class="o">=</span> <span class="n">api_caller</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(.*\.rb:[0-9]*):/</span><span class="p">)</span> <span class="k">if</span> <span class="n">api_caller</span>
</span><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:caller</span><span class="o">]</span> <span class="o">=</span> <span class="n">api_caller_line</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="k">if</span> <span class="n">api_caller_line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Garner implements this as <a href="https://github.com/dblock/garner/blob/master/lib/garner/strategies/keys/caller_strategy.rb">Garner::Strategies::Keys::Caller</a>.</p>

<h3>Cache Invalidation</h3>

<p>Invalidating a cache entry bound to multiple objects requires keeping an additional index along with the actual cache data. In the example above we&#8217;ve bound the resulting Widget to a specific <code>User</code>, the <code>Widget</code> instance itself and all instances of <code>Gadget</code>. Every time a Gadget changes, we&#8217;ll want to invalidate this cache entry. Garner will handle this either automatically via a mixin (we&#8217;ve provided <a href="https://github.com/dblock/garner/blob/master/lib/garner/mixins/mongoid_document.rb">Garner::Mixins::Mongoid::Document</a> for the Mongoid ODM) or via an explicit <code>invalidate(Gadget)</code> call.</p>

<p>Since we&#8217;re not able to scan the entire cache during invalidation, we keep a key index in the cache as well. The key for each index entry is derived from the individual elements in the binding.</p>

<h3>Using with Grape</h3>

<p>Garner currently ships with <a href="https://github.com/dblock/garner/blob/master/lib/garner/mixins/grape_cache.rb">Garner::Mixins::Grape::Cache</a>. There&#8217;re two ways to use it: <code>cache</code> and <code>cache_or_304</code>.</p>

<p>The <code>cache</code> implementation will generate a key from the binding by applying all registered cache key strategies within the current context, look up the entry by that key and either cache hit or miss. In summary, it&#8217;s an extension to a standard cache, introducing a much more fully featured binding system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># caches, but always returns the widget</span>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;widget/:id&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cache</span><span class="p">(</span><span class="n">bind</span><span class="p">:</span> <span class="o">[</span><span class="no">Widget</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]]</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Widget</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>cache_or_304({ bind: [ ] })</code> will generate a meta key from the binding by applying all registered cache key strategies within the current context and search the cache index by the meta key. If a value is found, it will be compared to the ETag or the timestamp supplied in the request&#8217;s <code>If-None-Match</code> or <code>If-Modified-Since</code> and issue a <code>304 Not Modified</code> where appropriate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># caches, returns the widget and supports If-Modified-Since or If-None-Match</span>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;widget/:id&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cache_or_304</span><span class="p">(</span><span class="n">bind</span><span class="p">:</span> <span class="o">[</span><span class="no">Widget</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]]</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Widget</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>An effective cache implementation for a web service combines server-side caching with client-side expiration. The latter broadly includes proxies, CDNs and browsers, all active actors in the process of exchanging information. The web is, in a way, an eventually consistent data storage and distribution system.</p>

<h3>Links</h3>

<ul>
<li><a href="https://github.com/artsy/garner">Garner</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Jenkins for Ruby and Ruby-on-Rails Teams]]></title>
    <link href="http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/"/>
    <updated>2012-05-27T08:15:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams</id>
    <content type="html"><![CDATA[<p>The <a href="http://jenkins-ci.org">Jenkins CI</a> project has grown tremendously in the past few months. There&#8217;re now hundreds of plugins and an amazing engaged community. Art.sy is a happy user and proud contributor to this effort with the essential <a href="https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin">jenkins-ansicolor plugin</a>, eliminating boring console output since 2011.</p>

<p>We are a continuous integration, deployment and devops shop and have been using Jenkins for over a year now. We&#8217;ve shared our experience at the <a href="http://www.cloudbees.com/juc2012.cb">Jenkins User Conference 2012</a> in <a href="http://www.slideshare.net/dblockdotorg/graduating-to-jenkins-ci-for-rubyonrails-teams">a presentation</a>. This blog post is an overview of how to get started with Jenkins for Ruby(-on-Rails) teams.</p>

<p><img src="http://artsy.github.com/images/2012-05-27-using-jenkins-for-ruby-on-rails-teams/jenkins.png" title="[Art.sy Jenkins CI]" ></p>

<!-- more -->


<p>When Art.sy had only three engineers, we hesitated to deploy Jenkins. The CI server was written in Java (i.e. wasn&#8217;t written in Ruby). We feared introducing excessive infrastructure too early. In retrospect, we were not in the business of building CI infrastructure, so not using Jenkins was a mistake. Since we adopted it, Jenkins has been operating painlessly and scaled nicely as our needs continued to grow.</p>

<p>Today, we run a single virtual server on <a href="http://www.linode.com">Linode</a> as our master Jenkins and have 8 Linode slaves. These are all $19 per month plans. Our usage is variable: few builds in the middle of the night and a very high number of builds during the day, so we&#8217;re planning on trying to build a Jenkins-slave on-demand system on AWS eventually.</p>

<p>Setting up a Jenkins master is straightforward.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>useradd -m jenkins -p <span class="o">[</span>password<span class="o">]</span> -s /bin/bash
</span><span class='line'>addgroup jenkins sudo
</span><span class='line'>wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add –
</span><span class='line'>sudo sh -c <span class="s1">&#39;echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</span>
</span><span class='line'>sudo aptitude update
</span><span class='line'>sudo aptitude install jenkins
</span></code></pre></td></tr></table></div></figure>


<p>We change Jenkins port in <code>/etc/default/jenkins</code>, add the machine to DNS and update the Jenkins URL to an externally visible one in the &#8220;Manage Jenkins&#8221;, &#8220;Configure System&#8221; menu. We enable and use &#8220;Matrix-Based Security&#8221; with a single user that all developers share and give the user permission to do everything in the same UI. Finally, we configure the Git Plugin with a global username and e-mail from our shared IT account that has Github access, setup a Github Web Hook and SMTP E-Mail notifications. Restarting Jenkins from the command line with <code>sudo service jenkins restart</code> completes the initial setup.</p>

<p>It&#8217;s also a good idea to setup Jenkins configuration backup with <a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup">thinBackup</a>, install <a href="http://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin">AnsiColor</a> and, of course, enable <a href="http://wiki.hudson-ci.org/display/HUDSON/ChuckNorris+Plugin">Chuck Norris</a>.</p>

<p>A typical Ruby development environment includes <a href="https://rvm.io/">RVM</a>, a working GIT client and a Github SSH key. We install these under our <code>jenkins</code> user manually on the first slave Linode and then clone slaves when we need more. RVM setup includes entries in <code>~/.bash_profile</code>, so a Jenkins job for a Ruby project can load that file and execute commands, including <code>rake</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span><span class='line'>rvm use 1.9.2
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>bundle <span class="nb">exec </span>rake
</span></code></pre></td></tr></table></div></figure>


<p>Our default Ruby project Rake task is <code>test:ci</code>. We run Jasmine and Capybara tests using a real browser, so we need to redirect all visible output to an X-Windows Virtual Frame Buffer (<a href="http://www.xfree86.org/4.0.1/Xvfb.1.html">XVFB</a>). This can be done by setting an <code>ENV</code> variable inside a Rake task. Our test target also <a href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">organizes our tests in suites</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:specs</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:display</span> <span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'><span class="err"> </span>  <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DISPLAY&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:display</span><span class="o">]</span> <span class="k">if</span> <span class="n">args</span><span class="o">[</span><span class="ss">:display</span><span class="o">]</span>
</span><span class='line'><span class="err"> </span>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;spec:suite:all&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="err">      </span>
</span><span class='line'><span class="err"> </span> <span class="n">task</span> <span class="ss">:jasmine</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:display</span> <span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'><span class="err"> </span>   <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DISPLAY&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:display</span><span class="o">]</span> <span class="k">if</span> <span class="n">args</span><span class="o">[</span><span class="ss">:display</span><span class="o">]</span>
</span><span class='line'><span class="err">    </span><span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;bundle exec rake jasmine:ci&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="err">    </span>
</span><span class='line'><span class="err">  </span><span class="n">task</span> <span class="ss">:all</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:display</span> <span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'><span class="err"> </span>   <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;assets&#39;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'><span class="err">    </span><span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;test:jasmine&#39;</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="n">args</span><span class="o">[</span><span class="ss">:display</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="err">    </span><span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;test:specs&#39;</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="n">args</span><span class="o">[</span><span class="ss">:display</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="err">      </span>
</span><span class='line'><span class="err">  </span><span class="n">task</span> <span class="ss">:ci</span> <span class="k">do</span>
</span><span class='line'><span class="err">  </span>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;test:all&#39;</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="s2">&quot;:99&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="err">      </span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A successful CI test run will trigger a deployment to a staging environment on Heroku.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'><span class="err">  </span><span class="n">task</span> <span class="ss">:staging</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'><span class="err">  </span>  <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;bundle exec heroku maintenance:on --app=app-staging&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;git push git@heroku.com:app-staging.git origin/staging:master&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;bundle exec heroku maintenance:off --app=app-staging&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll notice that we execute system commands with <code>system!</code>. Unlike the usual <code>system</code> method, our wrapper raises an exception when a command returns a non-zero error code to abort execution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">system!</span><span class="p">(</span><span class="n">cmdline</span><span class="p">)</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;[</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">] </span><span class="si">#{</span><span class="n">cmdline</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="n">rc</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="n">cmdline</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="s2">&quot;failed with exit code </span><span class="si">#{</span><span class="vg">$?</span><span class="o">.</span><span class="n">exitstatus</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="n">rc</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span> <span class="n">rc</span> <span class="o">||</span> <span class="vg">$?</span><span class="o">.</span><span class="n">exitstatus</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our production deployment task is also a Jenkins job.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'><span class="err">  </span><span class="n">task</span> <span class="ss">:production</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;git push git@heroku.com:app-production.git origin/production:master&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We don&#8217;t want any downtime on our production environment, so we don&#8217;t turn Heroku maintance on. Our staging deployment task also includes copying production data to staging, so we chose to enable maintenance to avoid people hitting the test environment while it&#8217;s being built and may be in a half-baked state.</p>

<p>Finally, we also run production daily cron-like tasks via Jenkins. It gives us email notifications, console output and the ability to manually trigger them. Centralizing operations in the same environment as CI creates truly continuous integration, deployment and operations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Automatic Plain Text MIME Parts with Rails ActionMailer]]></title>
    <link href="http://artsy.github.com/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/"/>
    <updated>2012-05-16T20:52:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer</id>
    <content type="html"><![CDATA[<p>E-mail is one of the most important ways to engage your users. And every time you touch a user&#8217;s inbox, it reflects on your brand. But getting email right has become increasing difficult due to the complexities introduced by the thousands of web-based, desktop and mobile mail clients. Email formatting is like the &#8220;Hunger Games&#8221; where the major players include online services such as GMail, Yahoo, Hotmail or AOL, desktop clients such as Outlook and a myriad mobile devices ranging from iPhone and Android to Blackberry.</p>

<p>To deal with this landscape, the MIME standard allows systems to send e-mail with multiple parts: <code>plain/text</code> for business-efficient devices such as the Blackberry, and <code>text/html</code> for web-based e-mail readers, such as GMail. Furthermore, <code>ActionMailer</code> supports multiple template formats: create an <code>.html.haml</code> template along with a <code>.txt.haml</code> template to generate both. We also know that <code>text/plain</code> email helps deliverability, but we believe a disproportionately small amount of text e-mails are actually read - the vast majority of devices are capable of parsing some HTML.</p>

<p>Is it possible to avoid having to maintain two separate templates without sacrificing deliverability? How can we inject a <code>text/plain</code> part into HTML e-mail that is both useful and &#8220;free&#8221;?</p>

<!--more-->


<p><code>ActionMailer::Base</code> defines an internal method called <code>collect_responses_and_parts_order</code> (<a href="http://apidock.com/rails/ActionMailer/Base/collect_responses_and_parts_order">#ref</a>), which iterates over templates and renders them. Let&#8217;s override that method and examine the contents of the generated parts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">collect_responses_and_parts_order</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">responses</span><span class="p">,</span> <span class="n">parts_order</span> <span class="o">=</span> <span class="k">super</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">responses</span><span class="p">,</span> <span class="n">parts_order</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each <code>response</code> is a MIME part with its boundary and the <code>parts_order</code> is the order in which the parts appear in the final e-mail. The <a href="http://www.ietf.org/rfc/rfc1341.txt">MIME RFC 1341</a> says that the parts must be generated in the increasing order of preference, ie. <code>text/html</code> content-type part last, provided you want it to be the preferred format of your email.</p>

<p>We can find whether the generated e-mail contains a <code>plain/text</code> part and otherwise generate one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">html_part</span> <span class="o">=</span> <span class="n">responses</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span> <span class="n">response</span><span class="o">[</span><span class="ss">:content_type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;text/html&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">text_part</span> <span class="o">=</span> <span class="n">responses</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span> <span class="n">response</span><span class="o">[</span><span class="ss">:content_type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;text/plain&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">html_part</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="n">text_part</span>
</span><span class='line'>  <span class="c1"># generate a text/plain part</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generating the text part means stripping all HTML with links preserved. <a href="http://nokogiri.org/">Nokogiri</a> has a very convenient deep <code>traverse</code> iterator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">body_parts</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="n">html_part</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">traverse</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">text?</span> <span class="ow">and</span> <span class="o">!</span> <span class="p">(</span><span class="n">content</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">content</span> <span class="p">?</span> <span class="n">node</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">strip</span> <span class="p">:</span> <span class="kp">nil</span><span class="p">)</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">body_parts</span> <span class="o">&lt;&lt;</span> <span class="n">content</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">node</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;a&quot;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">href</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">href</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^https?:/</span><span class="p">)</span>
</span><span class='line'>    <span class="n">body_parts</span> <span class="o">&lt;&lt;</span> <span class="n">href</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have all the parts, assemble them, get rid of duplicate text and links, and re-insert into the email as a <code>text/plain</code> multipart block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">responses</span><span class="o">.</span><span class="n">insert</span> <span class="mi">0</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">content_type</span><span class="p">:</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">body</span><span class="p">:</span> <span class="n">body_parts</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">parts_order</span><span class="o">.</span><span class="n">insert</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;text/plain&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code for <code>ActionMailerWithTextPart</code> is available in <a href="https://gist.github.com/2719486">this gist</a> under the MIT license. Inherit your mailers from this class to get automatic <code>plain/text</code> fallback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Organize Over 3000 RSpec Specs and Retry Test Failures]]></title>
    <link href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/"/>
    <updated>2012-05-15T12:00:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures</id>
    <content type="html"><![CDATA[<p>Having over three thousand RSpec tests in a single project has become difficult to manage. We chose to organize these into suites, somewhat mimicking our directory structure. And while we succeeded at making our Capybara integration tests more reliable (see <a href="http://artsy.github.com/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/">Reliably Testing Asynchronous UI with RSpec and Capybara</a>), they continue relying on finicky timeouts. To avoid too many false positives we&#8217;ve put together a system to retry failed tests. We know that a spec that fails twice in a row is definitely not a fluke!</p>

<p>Create a new Rake file in <code>lib/tasks/test_suites.rake</code> and declare an array of test suites.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">SPEC_SUITES</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="ss">:models</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="o">=&gt;</span> <span class="s2">&quot;spec/models/**/*_spec.rb&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="ss">:controllers</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="o">=&gt;</span> <span class="s2">&quot;spec/controllers/**/*_spec.rb&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="ss">:views</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="o">=&gt;</span> <span class="s2">&quot;spec/views/**/*_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p><code>RSpec::Core</code> contains a module called <code>RakeTask</code> that will programmatically create Rake tasks for you.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:test</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:suite</span>
</span><span class='line'>    <span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:run&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">suite</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">fail_on_error</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>rake -T</code> to ensure that the suites have been generated. To execute a suite, run <code>rake test:suite:models:run</code>. Having a test suite will help you separate spec failures and enables other organizations than by directory, potentially allowing you to tag tests across multiple suites.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake spec:suite:models:run
</span><span class='line'>rake spec:suite:controllers:run
</span><span class='line'>rake spec:suite:views:run
</span></code></pre></td></tr></table></div></figure>


<p>Retrying failed specs has been a long requested feature in RSpec (see <a href="https://github.com/rspec/rspec-core/issues/456">#456</a>). A viable approach has been finally implemented by <a href="https://github.com/antifun">Matt Mitchell</a> in <a href="https://github.com/rspec/rspec-core/pull/596">#596</a>. There&#8217;re a few issues with that pull request, but two pieces have already been merged that make retrying specs feasible outside of RSpec.</p>

<ul>
<li><a href="https://github.com/rspec/rspec-core/pull/610">#610</a>:
A fix for incorrect parsing input files specified via <code>-O</code>.</li>
<li><a href="https://github.com/rspec/rspec-core/pull/614">#614</a>:
A fix for making the <code>-e</code> option cumulative, so that one can pass multiple example names to run.</li>
</ul>


<p>Both will appear in the 2.11.0 version of RSpec, in the meantime you have to point your <code>rspec-core</code> dependency to the latest version on Github.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;rspec-core&quot;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/rspec/rspec-core.git&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to run <code>bundle update rspec-core</code>.</p>

<p>The strategy to retry failed specs is to output a file that contains a list of failed ones and to feed that file back to RSpec. The former can be accomplished with a custom logger. Create <code>spec/support/formatters/failures_formatter.rb</code>.</p>

<figure class='code'><figcaption><span>spec/support/formatters/failures_formatter.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/formatters/base_formatter&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">RSpec</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Core</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Formatters</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">FailuresFormatter</span> <span class="o">&lt;</span> <span class="no">BaseFormatter</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># create a file called rspec.failures with a list of failed examples</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">dump_failures</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">if</span> <span class="n">failed_examples</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;rspec.failures&quot;</span><span class="p">,</span> <span class="s2">&quot;w+&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">failed_examples</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">example</span><span class="o">|</span>
</span><span class='line'>            <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">retry_command</span><span class="p">(</span><span class="n">example</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">retry_command</span><span class="p">(</span><span class="n">example</span><span class="p">)</span>
</span><span class='line'>          <span class="n">example_name</span> <span class="o">=</span> <span class="n">example</span><span class="o">.</span><span class="n">full_description</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\\\&quot;</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="s2">&quot;-e </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">example_name</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to use the formatter, we must tell RSpec to <code>require</code> it with <code>--require</code> and to use it with <code>--format</code>. We don&#8217;t want to lose our settings in <code>.rspec</code> either - all these options can be combined in the Rake task.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:run&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">suite</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">fail_on_error</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">spec_opts</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;--require&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/support/formatters/failures_formatter.rb&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;--format&quot;</span><span class="p">,</span> <span class="s2">&quot;RSpec::Core::Formatters::FailuresFormatter&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s2">&quot;.rspec&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n+/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span><span class="o">.</span><span class="n">shellsplit</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">].</span><span class="n">flatten</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once a file is generated, we can feed it back to RSpec in another task, called <code>suite:suite[:id]:retry</code>.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:retry&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">suite</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">fail_on_error</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">spec_opts</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;-O&quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;rspec.failures&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;.rspec&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n+/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span><span class="o">.</span><span class="n">shellsplit</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">].</span><span class="n">flatten</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, lets combine the two tasks and invoke <code>retry</code> when the <code>run</code> task fails.</p>

<figure class='code'><figcaption><span>lib/tasks/test_suites.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rspec_failures</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;rspec.failures&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_f</span> <span class="n">rspec_failures</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;spec:suite:</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:run&quot;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="k">unless</span> <span class="vg">$?</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">] Failed, retrying </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">rspec_failures</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n+/</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="si">}</span><span class="s2"> failure(s) in spec:suite:</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2"> ...&quot;</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;spec:suite:</span><span class="si">#{</span><span class="n">suite</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">:retry&quot;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A complete version of our <code>test_suites.rake</code>, including a <code>spec:suite:all</code> task that executes all specs can be found <a href="https://gist.github.com/2597305">in this gist</a>. Our Jenkins CI runs <code>rake spec:suite:all</code>, with a much improved weather report since we started using this system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Making It Personal in iOS with Searchbars]]></title>
    <link href="http://artsy.github.com/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/"/>
    <updated>2012-05-11T20:52:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/11/on-making-it-personal&#8211;in-iOS-with-searchbars</id>
    <content type="html"><![CDATA[<p>We make Folio, a pretty kick-ass iPad app that we give away to our partners to showcase their inventory at art fairs. Whilst making it we tried to ensure that all of the application fits in with the <a href="http://art.sy">art.sy</a> website aesthetic, and recently the last natively styled control fell to our mighty code hammers. That was the <code>UISearchBar</code>.</p>

<p><img src="http://ortastuff.s3.amazonaws.com/images/custom_searchbar_example.jpg" alt="Screenshot of Artsy Folio" /></p>

<p>When displaying only search results in a table it makes a lot of sense to use Apple&#8217;s <code>UISearchDisplayController</code> as it handles a lot of edge cases for you. However the downside is that you lose some control over how the views interact.</p>

<p>The search bar was the only native control that actually made it into the version 1 release. This was mainly due to it requiring a bit of black magic in order to get it to work the way we wanted. So lets go through the code and rip it to pieces.</p>

<!--more-->


<p>First up, you&#8217;re going to want to make yourself a subclass of the <code>UISearchBar</code>, I&#8217;m going to be calling ours <code>ARSearchBar</code>. Here&#8217;s our public header.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ARSearchBar</span> : <span class="nc">UISearchBar</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Called from The SearchDisplayController Delegate</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">showCancelButton:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">show</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelSearchField</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the implementation file we declare private instance variables for keeping track of the textfield and the Cancel button. This is so we can avoid finding them in the view hierarchy when we want to change the frame it during resizing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ARSearchBar</span> <span class="p">(){</span>
</span><span class='line'>    <span class="n">UITextField</span> <span class="o">*</span><span class="n">foundSearchTextField</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UIButton</span> <span class="o">*</span><span class="n">overlayCancelButton</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, to look at setting the size we&#8217;ve found it easiest to deal with that in an overrode <code>setFrame</code> and setting the height of the new frame before it goes to the super class. As the search bar doesn&#8217;t change its height between state changes like text insertion it shouldn&#8217;t pose a problem to have it hardcoded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="n">frame</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ARSearchBarHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">setFrame:</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>What does pose a problem though is making sure that the subviews inside the search bar are positioned correctly with respect to the new height, this is amended in <code>layoutSubviews</code>. In our case the textfield should take up almost all of the search bar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">layoutSubviews</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// resize textfield</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ViewHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-=</span> <span class="n">ViewMargin</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up is that we can&#8217;t access our <code>foundSearchField</code> because it&#8217;s not been found yet! Personally,  I&#8217;m a big fan of using nibs for everything ( and pretty pumped about Storyboards too ) so we do our searching in <code>awakeFromNib</code> .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">awakeFromNib</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">awakeFromNib</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// find textfield in subviews</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nl">isSubclassOfClass:</span><span class="p">[</span><span class="n">UITextField</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">foundSearchTextField</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="n">subview</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a textfield, next up we want to stylize it. The perfect place for this is just after finding the textfield that you use to search in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">stylizeSearchTextField</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Sets the background to a static black by removing the gradient view</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// This is the gradient behind the textfield</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">description</span> <span class="nl">hasPrefix:</span><span class="s">@&quot;&lt;UISearchBarBackground&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subview</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// now change the search textfield itself</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">borderStyle</span> <span class="o">=</span> <span class="n">UITextBorderStyleNone</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">background</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">clearButtonMode</span> <span class="o">=</span> <span class="n">UITextFieldViewModeNever</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">leftView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">TextfieldLeftMargin</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">serifFontWithSize:</span><span class="n">ARFontSansLarge</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might be wondering why we removed the placeholder text? We needed more control over the style and positioning of the placeholder text and the search icon. These are easily controlled by the UISearchDisplayController subclass rather than inside the custom search bar. This is also the place that we can deal with having our custom Cancel button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">searchDisplayControllerWillBeginSearch:</span><span class="p">(</span><span class="n">UISearchDisplayController</span> <span class="o">*</span><span class="p">)</span><span class="n">controller</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">searchBar</span> <span class="nl">showCancelButton:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.2</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">searchPlaceholderLabel</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">searchDisplayControllerWillEndSearch:</span><span class="p">(</span><span class="n">UISearchDisplayController</span> <span class="o">*</span><span class="p">)</span><span class="n">controller</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">searchBar</span> <span class="nl">showCancelButton:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.2</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">searchPlaceholderLabel</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The corresponding code for showing and hiding the Cancel button is here. We just animate it in and out by a distance of 80.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">showCancelButton:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">show</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">show</span><span class="o">?</span> <span class="o">-</span><span class="n">CancelAnimationDistance</span> <span class="o">:</span> <span class="n">CancelAnimationDistance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.25</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">overlayCancelButton</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectOffset</span><span class="p">(</span><span class="n">overlayCancelButton</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The original Cancel button is something that we choose to keep around, rather than removing it form the view hierarchy, that&#8217;s so we can have our overlay Cancel button call its method instead of trying to replicate the cancel functionality ourselves.</p>

<p>To keep track of the Cancel button we need to know when its meant to appear, and when its meant to disappear. Because the Cancel button is created at runtime every time a search is started we need to
know when thats happening so we can hide it, we can do that by registering for <code>UITextFieldTextDidBeginEditingNotification</code> on the textfield once it&#8217;s been found. We do this in <code>awakeFromNib</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">removeOriginalCancel</span><span class="p">)</span> <span class="nl">name:</span><span class="n">UITextFieldTextDidBeginEditingNotification</span> <span class="nl">object:</span><span class="n">foundSearchTextField</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">removeOriginalCancel</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// remove the original button</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nl">isSubclassOfClass:</span><span class="p">[</span><span class="n">UIButton</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// This is called every time a search is began, </span>
</span><span class='line'>          <span class="c1">// so make sure to get the right button!</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">!=</span> <span class="n">ViewHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">subview</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we have the styling of the button. I&#8217;ve summed it up here as a lot of it is very application specific.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">createButton</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ARFlatButton</span> <span class="o">*</span><span class="n">cancelButton</span> <span class="o">=</span> <span class="p">[</span><span class="n">ARFlatButton</span> <span class="nl">buttonWithType:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">cancelButton</span> <span class="n">titleLabel</span><span class="p">]</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">sansSerifFontWithSize:</span><span class="n">ARFontSansSmall</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="s">@&quot;Cancel&quot;</span> <span class="n">uppercaseString</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cancelButton</span> <span class="nl">setTitle:</span><span class="n">title</span> <span class="nl">forState:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cancelButton</span> <span class="nl">setTitle:</span><span class="n">title</span> <span class="nl">forState:</span><span class="n">UIControlStateHighlighted</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">buttonFrame</span> <span class="o">=</span> <span class="n">cancelButton</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ViewHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">66</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">ViewMargin</span> <span class="o">+</span> <span class="n">CancelAnimationDistance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cancelButton</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">buttonFrame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cancelButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancelSearchField</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">overlayCancelButton</span> <span class="o">=</span> <span class="n">cancelButton</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">addSubview:</span><span class="n">overlayCancelButton</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">bringSubviewToFront:</span><span class="n">overlayCancelButton</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelSearchField</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// tap the original button!</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nl">isSubclassOfClass:</span><span class="p">[</span><span class="n">UIButton</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">!=</span> <span class="n">ViewHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">UIButton</span> <span class="o">*</span><span class="n">realCancel</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIButton</span> <span class="o">*</span><span class="p">)</span><span class="n">subview</span><span class="p">;</span>
</span><span class='line'>                <span class="p">[</span><span class="n">realCancel</span> <span class="nl">sendActionsForControlEvents:</span> <span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code is available <a href="https://gist.github.com/2667766">as a gist</a> under the MIT license.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Small with Big Data and Google Analytics]]></title>
    <link href="http://artsy.github.com/blog/2012/05/01/how-to-start-small-with-big-data-and-google-analytics/"/>
    <updated>2012-05-01T20:52:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/01/how-to-start-small-with-big-data-and-google-analytics</id>
    <content type="html"><![CDATA[<p>Why do so many companies write a homegrown pageviews tracking system? Between Google Analytics, Kissmetrics and many others, isn&#8217;t that a completely solved problem?</p>

<p>These popular solutions lack domain knowledge. They are easily capable of segmenting users by region or browser, but they fail to recognize rules core to your business. Tracking pageviews with a homegrown system becomes your next sprint&#8217;s goal.</p>

<p>Implementing a hit counter service is quite tricky. This is a write-heavy, asynchronous problem that must minimize impact on page rendering time, while dealing with rapidly growing amounts of data. Is there a middle ground between using Google Analytics and rolling out our own homegrown implementation? How can we use Google Analytics for data collection and inject domain knowledge into gathered data, incrementally, without writing our own service?</p>

<!--more-->


<p>Let&#8217;s write a Rake task that pulls data from Google Analytics. We can run it daily. Start with a Ruby gem called <a href="https://github.com/vigetlabs/garb">Garb</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;garb&quot;</span><span class="p">,</span> <span class="s2">&quot;0.9.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Garb requires Google Analytics credentials. Those can go into a YAML configuration file, which will use environment settings in production (it&#8217;s an ERB template, too). We can hardcode the test account values.</p>

<figure class='code'><figcaption><span>config/google_analytics.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span> <span class="nl">&amp;defaults</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">development, test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*defaults</span>
</span><span class='line'>  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="s">&quot;ga@example.com&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&quot;password&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ua</span><span class="p-Indicator">:</span> <span class="s">&quot;UA-12345678-1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*defaults</span>
</span><span class='line'>  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;GOOGLE_ANALYTICS_EMAIL&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;GOOGLE_ANALYTICS_PASSWORD&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ua</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;GOOGLE_ANALYICS_UA&#39;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Establish a Google Analytics session and fetch the profile corresponding to the Google user account with Garb.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;config/google_analytics.yml&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">)</span><span class="o">.</span><span class="n">result</span><span class="p">)</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">].</span><span class="n">symbolize_keys</span>
</span><span class='line'><span class="no">Garb</span><span class="o">::</span><span class="no">Session</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">config</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span> <span class="n">config</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">profile</span> <span class="o">=</span> <span class="no">Garb</span><span class="o">::</span><span class="no">Management</span><span class="o">::</span><span class="no">Profile</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">web_property_id</span> <span class="o">==</span> <span class="n">config</span><span class="o">[</span><span class="ss">:ua</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">raise</span> <span class="s2">&quot;missing profile </span><span class="si">#{</span><span class="n">config</span><span class="o">[</span><span class="ss">:ua</span><span class="o">]</span><span class="si">}</span><span class="s2"> in </span><span class="si">#{</span><span class="no">Garb</span><span class="o">::</span><span class="no">Management</span><span class="o">::</span><span class="no">Profile</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:web_property_id</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="n">profile</span>
</span></code></pre></td></tr></table></div></figure>


<p>Garbs needs a data model to collect pageviews. It extends <code>Garb::Model</code> and defines a set of &#8220;metrics&#8221; and &#8220;dimensions&#8221;.</p>

<figure class='code'><figcaption><span>app/models/google_analytics_pageviews.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GoogleAnalyticsPageviews</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Garb</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>  <span class="n">metrics</span> <span class="ss">:pageviews</span>
</span><span class='line'>  <span class="n">dimensions</span> <span class="ss">:page_path</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can play with the <a href="http://ga-dev-tools.appspot.com/explorer/">Google Analytics Query Explorer</a> to see the many possible metrics (such as pageviews) and dimensions (such as requested page path).</p>

<p>By default, Google Analytics lets clients retrieve 1000 records in a single request. To get all records we can add an iterator, called <code>all</code>, that will keep making requests until the server runs out of data. The code for <em>config/initializers/garb_model.rb</em> is <a href="https://gist.github.com/2265877">in this gist</a> and I made a <a href="https://github.com/vigetlabs/garb/pull/116">pull request</a> into Garb if you&#8217;d rather merge that onto your fork.</p>

<p>The majority of our pages are in the form of &#8220;/model/id&#8221;, for example &#8220;/artwork/leonardo-mona-lisa&#8221;. We&#8217;re interested in all pageviews for a given artwork and in pageviews for a given artist, at a given date. We&#8217;ll store selected Google Analytics data in a <code>GoogleAnalyticsPageviewsRecord</code> model described further.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="no">GoogleAnalyticsPageviews</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:start_date</span> <span class="o">=&gt;</span> <span class="n">t</span><span class="p">,</span> <span class="ss">:end_date</span> <span class="o">=&gt;</span> <span class="n">t</span> <span class="p">})</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="n">model</span> <span class="o">=</span> <span class="sr">/^\/#\!\/(?&lt;type&gt;[a-z-]+)\/(?&lt;id&gt;[a-z-]+)$/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">page_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">unless</span> <span class="p">(</span><span class="n">model</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;artwork&quot;</span> <span class="o">||</span> <span class="n">model</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;artist&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">GoogleAnalyticsPageviewsRecord</span><span class="o">.</span><span class="n">create!</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">:model_type</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:pageviews</span> <span class="o">=&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">pageviews</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:dt</span> <span class="o">=&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each <code>GoogleAnalyticsPageviewsRecord</code> contains the total pageviews for a given model ID at a given date. We now have a record for each artwork and artist. We can rollup existing data into a set of collections, incrementally. For example, <code>google_analytics_artworks_monthly</code> will contain the monthly hits for each artwork.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GoogleAnalyticsPageviewsRecord</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:model_type</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:model_id</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:pageviews</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:dt</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="no">Date</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">index</span> <span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="ss">:model_type</span><span class="p">,</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">ASCENDING</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="ss">:model_id</span><span class="p">,</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">ASCENDING</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="ss">:dt</span><span class="p">,</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">DESCENDING</span><span class="o">]</span>
</span><span class='line'>  <span class="o">]</span><span class="p">,</span> <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:rollup</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rollup</span>
</span><span class='line'>    <span class="no">Mongoid</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">&quot;google_analytics_</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">model_type</span><span class="si">}</span><span class="s2">s_total&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>      <span class="p">{</span> <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">model_id</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;$inc&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;count&quot;</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">pageviews</span> <span class="p">}},</span> <span class="p">{</span> <span class="ss">:upsert</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">:daily</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="ss">:weekly</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">beginning_of_week</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%W&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="ss">:monthly</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">beginning_of_month</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="ss">:yearly</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">beginning_of_year</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">dt</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">&quot;google_analytics_</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">model_type</span><span class="si">}</span><span class="s2">s_</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">model_id</span><span class="p">,</span> <span class="ss">:dt</span> <span class="o">=&gt;</span> <span class="n">dt</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;$inc&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;count&quot;</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">pageviews</span> <span class="p">}},</span> <span class="p">{</span> <span class="ss">:upsert</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rollup lets us query these tables directly. For example, the following query returns a record with the pageviews for the Leonardo&#8217;s &#8220;Mona Lisa&#8221; in January 2012.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Mongoid</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">&quot;google_analytics_artworks_monthly&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find_one</span><span class="p">({</span>
</span><span class='line'>  <span class="ss">:model_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;artwork&quot;</span><span class="p">,</span> <span class="ss">:model_id</span> <span class="o">=&gt;</span> <span class="s2">&quot;leonardo-mona-lisa&quot;</span><span class="p">,</span> <span class="ss">:dt</span> <span class="o">=&gt;</span> <span class="s2">&quot;2012/01&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the obvious advantages of pulling Google Analytics data is the low volume of requests and offline processing. We&#8217;re letting Google Analytics do the hard work of collecting data for us in real time and are consuming its API without the performance or time pressures.</p>
]]></content>
  </entry>
  
</feed>
