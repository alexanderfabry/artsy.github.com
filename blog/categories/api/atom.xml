<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | Art.sy Engineering]]></title>
  <link href="http://artsy.github.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2012-05-29T06:54:00-04:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Art.sy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simplifying Model-Level JSON Versioning with Mongoid-Cached-Json]]></title>
    <link href="http://artsy.github.com/blog/2012/03/23/simplifying-model-level-json-versioning-with-mongoid-cached-json/"/>
    <updated>2012-03-23T09:14:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/03/23/simplifying-model-level-json-versioning-with-mongoid-cached-json</id>
    <content type="html"><![CDATA[<p>Did you know that Netflix has hundreds of API versions, one for each device? Daniel Jacobson's <a href="http://www.slideshare.net/danieljacobson/techniques-for-scaling-the-netflix-api-qcon-sf">Techniques for Scaling the Netflix API</a> at QConSF 2011 explained why they chose this model. And while we don't all build distributed services that supply custom-tailored data to thousands of heterogeneous TVs and set-top boxes, we do have to pay close attention to API versioning from day one.</p>

<p>Versioning is hard. Your data models evolve, but you must maintain backward-compatibility for your public interfaces. While many strategies exist to deal with this problem, we'd like to propose one that requires very little programming effort and that is more declarative in nature.</p>

<p>At Art.sy we use <a href="http://github.com/intridea/grape">Grape</a> and implement the "path" versioning strategy from the <a href="http://github.com/intridea/grape/tree/frontier">frontier</a> branch. Our initial v1 API is consumed by our own website and services and lives at <a href="https://artsyapi.com/api/v1">https://artsyapi.com/api/v1</a>. We've also prototyped v2 and by the time v1 is frozen, it should already be in production.</p>

<p>Grape takes care of version-based routing and has a system that lets you split version-based presentation of a model from the model implementation. I find that separation forcefully induced by unnecessary implementation complexity around wanting to return different JSON depending on the API version requested. What if implementing versioning in <code>as_json</code> were super simple?</p>

<p>Consider a Person model returned from a v1 API.</p>

<p>``` ruby
class API &lt; Grape::API
  prefix :api
  version :v1
  namespace :person</p>

<pre><code>get ":id"
  Person.find(params[:id]).as_json
end
</code></pre>

<p>  end
end
```</p>

<p>``` ruby
class Person
  include Mongoid::Document</p>

<p>  field :name</p>

<p>  def as_json</p>

<pre><code>{
  name: name
}
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>In v2 the model split <code>:name</code> into a <code>:first</code> and <code>:last</code> name and in v3 <code>:name</code> has finally been deprecated. A version v3 Person model would look as follows.</p>

<p>``` ruby
class Person
  include Mongoid::Document</p>

<p>  field :first
  field :last</p>

<p>  def as_json</p>

<pre><code>{
  first: first,
  last: last
}
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>How can we combine these two implementations and write <code>Person.find(params[:id]).as_json({ :version =&gt; ? })</code>?</p>

<p>In <a href="http://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a> we've introduced a declarative way of versioning JSON. Here's the code for Person v3.</p>

<p>``` ruby
class Person
  include Mongoid::Document
  include Mongoid::CachedJson</p>

<p>  field :first
  field :last</p>

<p>  def name</p>

<pre><code>[ first, last ].join(" ")
</code></pre>

<p>  end</p>

<p>  json_fields \</p>

<pre><code>name: { :versions =&gt; [ :v1, :v2 ] },
first: { :versions =&gt; [ :v2, :v3 ] },
last: { :versions =&gt; [ :v2, :v3 ] }
</code></pre>

<p>end
```</p>

<p>With the <a href="http://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a> gem you also get caching that respects JSON versioning, for free. Read about it <a href="http://artsy.github.com/blog/2012/02/20/caching-model-json-with-mongoid-cached-json/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10x Rack and Rails Output Compression with Rack::Deflater]]></title>
    <link href="http://artsy.github.com/blog/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater/"/>
    <updated>2012-02-24T16:05:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater</id>
    <content type="html"><![CDATA[<p>You can quickly reduce the amount of data transferred from your Rack or Rails application with <a href="https://github.com/rack/rack/blob/master/lib/rack/deflater.rb">Rack::Deflater</a>. Anecdotal evidence shows a reduction from a 50Kb JSON response into about 6Kb. It may be a huge deal for your mobile clients.</p>

<p>For a Rails application, modify config/application.rb or config/environment.rb.</p>

<p><code>ruby config/application.rb
Acme::Application.configure do
  config.middleware.use Rack::Deflater
end
</code></p>

<p>For a Rack application, add the middleware in config.ru.</p>

<p><code>ruby config.ru
use Rack::Deflater
run Acme::Instance
</code></p>

<!-- more -->


<p>Note that the order of the middleware is very important. For example, we also use Rack::JSONP that adds automatic JSONP support to our API. It must be invoked before Rack::Deflater or it will attempt to wrap compressed content. Rack middleware is executed in reverse order [<a href="http://verboselogging.com/2010/01/20/proper-rack-middleware-ordering">source</a>].</p>

<p><code>ruby config/application.rb
  config.middleware.use Rack::Deflater
  config.middleware.use Rack::JSONP
</code></p>

<p>A couple of handy RSpec tests to add to your application. You will need to modify this code with a valid API path and expected response.</p>

<p>``` ruby spec/api/rack_deflater_spec.rb
require 'spec_helper'</p>

<p>describe Rack::Deflater do
  it "produces an identical eTag whether content is deflated or not" do</p>

<pre><code>get "/api/acme"
response.headers["Content-Encoding"].should be_nil
etag = response.headers["Etag"]
content_length = response.headers["Content-Length"].to_i
get "/api/acme", {}, { "HTTP_ACCEPT_ENCODING" =&gt; "gzip" }
response.headers["Etag"].should == etag
response.headers["Content-Length"].to_i.should_not == content_length
response.headers["Content-Encoding"].should == "gzip"
</code></pre>

<p>  end
  it "deflates JSONP content" do</p>

<pre><code>get "/api/acme?callback=parseResponse", {}, { "HTTP_ACCEPT_ENCODING" =&gt; "deflate" }
response.headers["Content-Encoding"].should == "deflate"
inflated_response_body = Zlib::Inflate.new(-Zlib::MAX_WBITS).inflate(response.body.to_s)
inflated_response_body.should == "parseResponse(...)"
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching Model JSON with Mongoid-Cached-Json]]></title>
    <link href="http://artsy.github.com/blog/2012/02/20/caching-model-json-with-mongoid-cached-json/"/>
    <updated>2012-02-20T13:06:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/02/20/caching-model-json-with-mongoid-cached-json</id>
    <content type="html"><![CDATA[<p>Consider the following two <a href="http://mongoid.org">Mongoid</a> domain models, <em>Widget</em> and <em>Gadget</em>.</p>

<p>``` ruby widget.rb
class Widget
  include Mongoid::Document</p>

<p>  field :name
  has_many :gadgets
end
<code>
</code> ruby gadget.rb
class Gadget
  include Mongoid::Document</p>

<p>  field :name
  field :extras</p>

<p>  belongs_to :widget
end
```
And an API call that returns a collection of widgets.</p>

<p><code>ruby
get 'widgets' do
  Widget.all.as_json
end
</code></p>

<p>Given many widgets, the API makes a subquery to fetch the corresponding gadgets for each widget.</p>

<p>Introducing <a href="https://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a>. This library mitigates several frequent problems with such code.</p>

<ul>
<li>Adds a declarative way of specifying a subset of fields to be returned part of <em>as_json</em>.</li>
<li>Avoids a large amount of subqueries by caching document JSONs participating in the parent-child relationship.</li>
<li>Provides a consistent strategy for restricting child documents' fields from being returned via the parent JSON.</li>
</ul>


<p>Using <em>Mongoid::CachedJson</em> we were able to cut our JSON API average response time by about a factor of 10. Find it <a href="https://github.com/dblock/mongoid-cached-json">on Github</a>.</p>
]]></content>
  </entry>
  
</feed>
