<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Performance | Art.sy Engineering]]></title>
  <link href="http://artsy.github.com/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2012-05-29T06:58:33-04:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Art.sy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[10x Rack and Rails Output Compression with Rack::Deflater]]></title>
    <link href="http://artsy.github.com/blog/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater/"/>
    <updated>2012-02-24T16:05:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/02/24/10x-rack-and-rails-output-compression-with-rack-deflater</id>
    <content type="html"><![CDATA[<p>You can quickly reduce the amount of data transferred from your Rack or Rails application with <a href="https://github.com/rack/rack/blob/master/lib/rack/deflater.rb">Rack::Deflater</a>. Anecdotal evidence shows a reduction from a 50Kb JSON response into about 6Kb. It may be a huge deal for your mobile clients.</p>

<p>For a Rails application, modify config/application.rb or config/environment.rb.</p>

<p><code>ruby config/application.rb
Acme::Application.configure do
  config.middleware.use Rack::Deflater
end
</code></p>

<p>For a Rack application, add the middleware in config.ru.</p>

<p><code>ruby config.ru
use Rack::Deflater
run Acme::Instance
</code></p>

<!-- more -->


<p>Note that the order of the middleware is very important. For example, we also use Rack::JSONP that adds automatic JSONP support to our API. It must be invoked before Rack::Deflater or it will attempt to wrap compressed content. Rack middleware is executed in reverse order [<a href="http://verboselogging.com/2010/01/20/proper-rack-middleware-ordering">source</a>].</p>

<p><code>ruby config/application.rb
  config.middleware.use Rack::Deflater
  config.middleware.use Rack::JSONP
</code></p>

<p>A couple of handy RSpec tests to add to your application. You will need to modify this code with a valid API path and expected response.</p>

<p>``` ruby spec/api/rack_deflater_spec.rb
require 'spec_helper'</p>

<p>describe Rack::Deflater do
  it "produces an identical eTag whether content is deflated or not" do</p>

<pre><code>get "/api/acme"
response.headers["Content-Encoding"].should be_nil
etag = response.headers["Etag"]
content_length = response.headers["Content-Length"].to_i
get "/api/acme", {}, { "HTTP_ACCEPT_ENCODING" =&gt; "gzip" }
response.headers["Etag"].should == etag
response.headers["Content-Length"].to_i.should_not == content_length
response.headers["Content-Encoding"].should == "gzip"
</code></pre>

<p>  end
  it "deflates JSONP content" do</p>

<pre><code>get "/api/acme?callback=parseResponse", {}, { "HTTP_ACCEPT_ENCODING" =&gt; "deflate" }
response.headers["Content-Encoding"].should == "deflate"
inflated_response_body = Zlib::Inflate.new(-Zlib::MAX_WBITS).inflate(response.body.to_s)
inflated_response_body.should == "parseResponse(...)"
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>
